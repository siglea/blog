---
layout: post
title:  "DB Mysql"
date:   2019-11-12 11:25:00 +0900
comments: true
tags:
- 数据库 
categories:
- 技术
---

#### 索引原理(B+Tree)
- BS树(Binary Search Tree二叉查找树) -> AVL(人名，平衡二叉树) Tree -> 红黑树 -> B-/B+Tree(平衡多路查找树) -> LSM
    - <http://www.sohu.com/a/280609547_818692>
      - 既然hash比B+树更快，为啥mysql还用B+树来存索引吗？
        1. 这和业务场景有关。如果只选一个数据，那确实是hash更快。但是数据库中经常会选择多条，这时候由于B+树索引有序，并且又有链表相连，它的查询效率比hash就快很多了。
        2. 而且数据库中的索引一般是在磁盘上，数据量大的情况可能无法一次装入内存，B+树的设计可以允许数据分批加载，同时树的高度较低，提高查找效率。
        3. 与B数相比，如果是多条的话，B树需要做局部的中序遍历，可能要跨层访问。而B+树由于所有数据都在叶子结点，不用跨层，同时由于有链表结构，只需要找到首尾，通过链表就能把所有数据取出来了。
      - AVLTree 在windowsNT内核中广泛使用，写少读多
      - 红黑树适合于内存索引查找 比如Map、Set <https://mp.weixin.qq.com/s/cnDx8lJ6fXHgLZWsqjWrag>
      - B树尤其是多路B数主要用在文件存储系统,文件系统和数据库的索引都是存在硬盘上的，并且如果数据量大的话，不一定能一次性加载到内存中。
        用B树可以一路一路的查找 
      - 红黑树常用于存储内存中的有序数据，增删很快，b+树常用于文件系统和数据库索引，因为b树的子节点大于红黑树，红黑树只能有2个子节点，b树子节点大于2，子节点树多这一特点保证了存储相同大小的数据，树的高度更小，数据局部更加紧凑，而硬盘读取有局部加载的优化（把要读取数据和周围的数据一起预先读取），b树相邻数据物理上更加紧凑这一特点符合硬盘进行io优化的特性。
    - 更加详细的应用范围<https://www.cnblogs.com/tiancai/p/9024351.html>
    - 完美总结B+树<https://mp.weixin.qq.com/s/YMbRJwyjutGMD1KpI_fS0A>

#### 各种优化
- <https://www.jianshu.com/p/efaa9005a598>
- <https://www.jb51.net/article/136701.htm>
- <https://www.cnblogs.com/houss/p/10598901.html>
- <https://coolshell.cn/articles/1846.html>
```sql
# 优化1
select * from t_third_device where third='kuaishou' limit 300000,5; # 优化前
select * from t_third_device a inner join (select id from t_third_device where third='kuaishou' limit 300000,5) b on a.id=b.id; # 优化后
```

#### 常用指标
- QPS   (2w/s与机器配置及数据量有关)
- TPS   (1w/s)
- 并发数
- 连接数
- 缓存命中率
- 慢查询
```
slow_query_log=on
slow_query_log_file=存放目录
long_query_time=0.1秒
log_queries_not_using_indexes=on
```
- 主从延迟 
```
show slave status;
Seconds_Behind_Master
```
- 死锁
```
set global innodb_print_all_deadlocks=on; 
```

#### Mysql WAL技术 Write-Ahead Logging
    
   在计算机领域，WAL（Write-ahead logging，预写式日志）是数据库系统提供原子性和持久化的一系列技术。
   在使用WAL的系统中，所有的修改都先被写入到日志中，然后再被应用到系统状态中。通常包含redo和undo两部分信息。
   为什么需要使用WAL，然后包含redo和undo信息呢？举个例子，如果一个系统直接将变更应用到系统状态中，那么在机器掉电重启之后系统需要知道操作是成功了，
   还是只有部分成功或者是失败了（为了恢复状态）。如果使用了WAL，那么在重启之后系统可以通过比较日志和系统状态来决定是继续完成操作还是撤销操作。 
   什么是WAL？<https://www.cnblogs.com/hzmark/p/wal.html>

#### InnoDB与MyISAM(Index Sequence Access Method)
- 核心区别在于事务，InnoDb是基于MVCC（Mutli Version Concurrency Control）实现了一套细粒度的高性能的事务控制
  MyISAM仅仅实现了基于表锁实现了很粗粒度的事务（也就适用于日志后台存储、CMS后台系统、配置相关、Mysql系统库里的某些系统表也使用到了）
    - 4个隔离级别透彻分析 <https://www.jianshu.com/p/db334404d909>
    - Mysql中MVCC的使用及原理详解 <https://blog.csdn.net/w2064004678/article/details/83012387>
- 索引结构不同
    - <https://mp.weixin.qq.com/s/_X_3LW7hcUbguVYAG78-ew>    
- 其他不同
    - <https://mp.weixin.qq.com/s/V6_hTkhr6QvDrQ0LRsyPrg>
    - <https://mp.weixin.qq.com/s/UjOQIgf2rENqlmfE-ECR-A>
- 引擎不同的几个方面：Storage mechanism、Locking levels、Indexing、Capabilities and functions

#### FAQ
- 问题：INT(M)中M究竟有何用？

    int类型占四个字节，一个字节8比特位，也就是4*8=32比特位，可以表示的数字个数是2的32次方个(2^32)。声明一个int类型的数据，长度便已经固定，那么这个M究竟有何用？
    结论：INT(M)中的M与数据存储长度没有关系，只是标识数据显示长度，在显示时不足无数会自动填充0进行补齐，必须配合AutoFill使用。
- MySQL 中 InnoDB 引擎的行锁是通过加在什么上完成(或称实现) 的?

    InnoDB 行锁是通过给索引上的索引项加锁来实现的，这一点 MySQL 与 Oracle 不同，后者是通过在数据块中对相应数据行加锁来实现的。
    InnoDB 这 种行锁实现特点意味着:只有通过索引条件检索数据，InnoDB 才使用行级 锁，否则，InnoDB 将使用表锁!
- 各种锁 
    - 本质都为了实现数据一致性及各种事务控制
    - 悲观锁：读取数据时就加锁排他
    - 乐观锁：读取数据不加锁，更新时处理（比如版本号机制、CAS compare and swap算法）
    - 共享锁(share lock)、排它锁（exclusive lock）、意向共享锁、意向排它锁 意向共享锁和意向排他锁锁定的是表。
        <https://www.jianshu.com/p/c456f726e9c7>
- 数据库三范式
    - 表中的每个字段不可分割
    - 表有且只有一个主键，也即是每个表只是描述一件事
    - 不存在对非主键列的依赖传递，比如userId,userName不要同时出现在order中，有时为了查询效率也冗余个别字段
- 一张表，里面有 ID 自增主键，当 insert 了 17 条记录之后，删除了第 15,16,17 条记录， 再把 Mysql 重启，再 insert 一条记录，这条记录的 ID 是 18 还是 15 ?
    (1)如果表的类型是 MyISAM，那么是 18
        因为 MyISAM 表会把自增主键的最大 ID 记录到数据文件里，重启 MySQL 自增主键的最大 ID 也不会丢失
    (2)如果表的类型是 InnoDB，那么是 15
        InnoDB 表只是把自增主键的最大 ID 记录到内存中，所以重启数据库或者是对表进行 OPTIMIZE 操作，都会导致最大 ID 丢失
- 如何区分 FLOAT 和 DOUBLE?
    
    以下是 FLOAT 和 DOUBLE 的区别:
    浮点数以 8 位精度存储在 FLOAT 中，并且有四个字节。 浮点数存储在 DOUBLE 中，精度为 18 位，有八个字节。
- 区分 CHAR_LENGTH 和 LENGTH?
    
    CHAR_LENGTH 是字符数，而 LENGTH 是字节数。Latin 字符的这两个数据是相同的，但是对 于 Unicode 和其他编码，它们是不同的。
- federated 表是什么?
    
    federated 表，允许访问位于其他服务器数据库上的表。
    <https://blog.csdn.net/qq_33578833/article/details/80177115>
    
- 可以使用多少列创建索引?

    任何标准表最多可以创建 16 个索引列。
    
#### 其他
- Mysql主从同步 <https://mp.weixin.qq.com/s/ZNkYhwWPpsF532B3rwN_Kw>
- Mysql+Keepalived实现双高可用 <https://www.cnblogs.com/kevingrace/p/6710136.html>
- PROCEDURE ANALYSE 
- 全文索引
- 分区表 <https://www.jianshu.com/p/b61d767f4ff5>
- UTF-8编码占几个字节 <https://blog.csdn.net/bluetjs/article/details/52936943>

[数据库规范](https://database.51cto.com/art/201910/604128.htm)