---
layout: post
title:  " Jvm（一）垃圾回收机制与调优 "
date:   2019-11-04 11:25:00
tags:
- Java
categories:
- 技术
---
#### 垃圾回收器组合 7种
- Parallel Old & Parallel Scavenge New 高吞吐量 （1种）
- G1 （1种）
- Serial Old （5种）
    - & CMS Old & (Serial || ParNew 2种)
    - & Serial
    - & ParNew
    - & Parallel Scavenge New
- CMS短停顿 与 Scavenge 高吞吐不可一组

#### 垃圾回收器
- Serial收集器（复制算法): 新生代单线程收集器，标记和清理都是单线程，优点是简单高效；
- ParNew收集器 (复制算法): 新生代收并行集器，实际上是Serial收集器的多线程版本，在多核CPU环境下有着比Serial更好的表现；
- Parallel Scavenge收集器 (复制算法): 新生代并行收集器，追求高吞吐量，高效利用 CPU。吞吐量 = 用户线程时间/(用户线程时间+GC线程时间)，高吞吐量可以高效率的利用CPU时间，尽快完成程序的运算任务，适合后台应用等对交互相应要求不高的场景；
- Serial Old收集器 (标记-整理算法): 老年代单线程收集器，Serial收集器的老年代版本；
- Parallel Old收集器 (标记-整理算法)： 老年代并行收集器，吞吐量优先，Parallel Scavenge收集器的老年代版本；
- CMS(Concurrent Mark Sweep)收集器（标记-清除算法）： 老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短GC回收停顿时间。
- G1(Garbage First)收集器 (标记-整理算法)： Java堆并行收集器，G1收集器是JDK1.7提供的一个新收集器，G1收集器基于“标记-整理”算法实现，也就是说不会产生内存碎片。
    此外，G1收集器不同于之前的收集器的一个重要特点是：G1回收的范围是整个Java堆(包括新生代，老年代)，而前六种收集器回收的范围仅限于新生代或老年代。
    可以通过配置参数设置可控的停顿时间。可以设置G1HeapRegionSize为2的指数，尽可能是分为2048份。会根据算法判断出哪个region回收价值最高，而优先回收。
    Mixed GC不是full GC，它只能回收部分老年代的Region，如果mixed GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行Mixed GC，就会使用serial old GC（full GC）来收集整个GC heap。所以我们可以知道，G1是不提供full GC的。    
- ZGC,在64位的JVM中使用，用color point标记出Finalizable、 Remapped、Marked1、Marked0几种状态，可以节省遍历RememberSet的时间，也可执行不同的逻辑；
    region大小不同，对象大小不同用的Page不同，方便整理回收；大部分对象标记和对象转移都是可以和应用线程并发。
    - <https://www.jianshu.com/p/4e4fd0dd5d25>
    - <https://www.jianshu.com/p/60d9e125dcf3>
    
#### 分代垃圾回收器是怎么工作的？
- 分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。
- 新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是  8:1:1，它的执行流程如下：
- 把 Eden + From Survivor 存活的对象放入 To Survivor 区；
清空 Eden 和 From Survivor 分区；
From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。
每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。
- 老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。

#### GC的收集算法（实战中是集中算法组合使用）
- 标记-复制：复制到新区域，回收老区域
    Serial New、Parallel New、Parallel Scavenge New、G1
- 标记-清除
    CMS (产生碎片，默认选择Serial配合最后整理)
- 标记-整理：移动到一侧，找边界然后清理边界外的所有空间
    Serial Old、Parallel Old、G1

#### 分代（为了更高效的区别回收，G1的分区region也是为了发挥多核并发优势）
- Young Generation
    Eden 伊甸园
    Survivor 幸存者（from/to，S0/S1)    
- Tenured/Old Generation
- Permanent Generation (Java8之前）
- Metaspace (Java8之后）

#### 安全点、安全空间
<img src="/img/gc1.jpg" width="600px" />
<img src="/img/gc2.jpg" width="600px" />
<img src="/img/gc3.jpg" width="600px" />

#### 空间分配担保
<img src="/img/gc4.jpg" width="600px" />  

#### GC收集器
- Serial（串行）收集器
    新生代、老生代
- Parallel（并行）收集器
    新生代、老生代
- Parallel Scavenge New （GC自适应的调节策略GC Ergonomics）
    新生代、通过调整相关参数，比如新生代的大小，达到以合适的时间和耗时，达到高吞吐量
    吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）
- CMS（Concurrent Mark Sweep 并发）收集器 （并发低停顿收集器 Concurrent Low Pause Collector）
    老生代
- G1（并发）收集器（优先回收价值最大的Region（这也就是Garbage-First名称的来由）
    新生代、老生代
- JDK11的ZGC <https://mp.weixin.qq.com/s/KUCs_BJUNfMMCO1T3_WAjw>

#### 参考
- JVM的4种垃圾回收算法、垃圾回收机制与总结 <https://zhuanlan.zhihu.com/p/54851319>
- 7种JVM垃圾收集器特点，优劣势、及使用场景 <https://zhuanlan.zhihu.com/p/58896728>
- 深入理解JVM，7种垃圾收集器 <http://blog.itpub.net/69917606/viewspace-2656882>
- 深入详解JVM内存模型与JVM参数详细配置 <https://zhuanlan.zhihu.com/p/58896619>
    - 堆内存（Heap）此内存区域的唯一目的就是存放对象实例（new的对象），几乎所有的对象实例都在这里分配内存。
    - 方法区（Method Area）方法区也称”永久代“，它用于存储虚拟机加载的类信息、常量、静态变量、是各个线程共享的内存区域。
    - 虚拟机栈(JVM Stack) Java虚拟机栈是线程私有，生命周期与线程相同。创建线程的时候就会创建一个java虚拟机栈。
      虚拟机执行java程序的时候，每个方法都会创建一个栈帧，栈帧存放在java虚拟机栈中，通过压栈出栈的方式进行方法调用。
      栈帧又分为一下几个区域：局部变量表、操作数栈、动态连接、方法出口等。
    - 本地方法栈(Native Stack) 本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。
    - 程序计数器（PC Register）
      程序计数器就是记录当前线程执行程序的位置，改变计数器的值来确定执行的下一条指令，比如循环、分支、方法跳转、异常处理，线程恢复都是依赖程序计数器来完成。
      Java虚拟机多线程是通过线程轮流切换并分配处理器执行时间的方式实现的。为了线程切换能恢复到正确的位置，每条线程都需要一个独立的程序计数器，所以它是线程私有的。
    - 直接内存
      直接内存并不是虚拟机内存的一部分，也不是Java虚拟机规范中定义的内存区域。jdk1.4中新加入的NIO，引入了通道与缓冲区的IO方式，它可以调用Native方法直接分配堆外内存，这个堆外内存就是本机内存，不会影响到堆内存的大小。
- JVM性能调优的6大步骤，及关键调优参数详解 <https://zhuanlan.zhihu.com/p/58897189>
- 深入剖析JVM：G1收集器+回收流程+推荐用例 <https://zhuanlan.zhihu.com/p/59861022>

#### java 参数
- 查看JVM使用的默认的垃圾收集器 <https://www.cnblogs.com/grey-wolf/p/9217497.html>
- JVM 参数 <https://blog.csdn.net/liyongbing1122/article/details/88716400>


