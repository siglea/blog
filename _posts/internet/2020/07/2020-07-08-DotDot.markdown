---
layout: post
title:  "DotDot"
date:   2020-07-08 15:18:00 +0900
comments: true
tags:
- Java
categories:
- 技术
---
#### ArrayList的扩容方式和扩容时机
- 初始化
    ArrayList的底层是一个动态数组，ArrayList首先会对传进来的初始化参数initalCapacity进行判断
    如果参数等于0，则将数组初始化为一个空数组，
    如果不等于0，将数组初始化为一个容量为10的数组。
- 扩容时机
    当数组的大小大于初始容量的时候(比如初始为10，当添加第11个元素的时候)，就会进行扩容，新的容量为旧的容量的1.5倍。
    Vector会扩容2倍。
- 扩容方式
   扩容的时候，会以新的容量建一个原数组的拷贝，修改原数组，指向这个新数组，原数组被抛弃，会被GC回收。
-  蚂蚁金服 <https://www.cnblogs.com/silyvin/p/10223910.html>

#### volatile（保证可见性、禁止重排、无法实现原子性）
- 指令重排只会保证串行语义的执行一致性(单线程) 并不会关心多线程间的语义一致性

### CAS & Unsafe
- CAS的全称为Compare-And-Swap，它是一条CPU并发原语。它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。
- CAS并发原语体现在JAVA语言中就是sum.misc.Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所有的数据不一致问题。
- CAS只能保证一个共享变量的原子性
- CAS自旋

```shell
# 我们可以看到getAndAddInt方法执行时，有个do while
# unsafe.getAndAddInt
public final int getAndAddInt(Object var1, long var2, int var4){
    int var5;
    do {
        var5 = this.getIntVolatile(var1, var2);
    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));
    return var5;
}

# 如果CAS失败，会一直进行尝试。如果CAS长时间一直不成功，可能会能CPU带来很大的开锁。
```

- CAS造成的ABA问题用版本号解决

```shell
# （旧值，新值）
atomicReference.compareAndSet(101, 100);

# AtomicStampedReference 以时间戳做为版本号解决ABA的问题
public boolean compareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedStamp,
                                 int newStamp) {
```

#### Exchanger
- 允许在并发任务之间交换数据。具体来说，Exchanger类允许在两个线程之间定义同步点。当两个线程都到达同步点时，他们交换数据结构，因此第一个线程的数据结构进入到第二个线程中，第二个线程的数据结构进入到第一个线程中
- 例子模拟一个队列中数据的交换使用的场景：
    - 线程A往队列中存入数据
    - 线程B从队列中消耗数据
    - 当线程A存满的时候
    - 才交换给线程B
    - 当线程B消耗完成之后才交换给线程A。
    - 线程A、B的生产和消耗的速率有可能不同
    - 对方线程调用exchange之前，另一个线程执行到exchange会阻塞

#### JVM 对 Java 的原生锁做了哪些优化？
- 一种优化是使用自旋锁，即在把线程进行阻塞操作之前先让线程自旋等待一段时间，可能在等待期间其他线程已经解锁，这时就无需再让线程执行阻塞操作，避免了用户态到内核态的切换。

- 现代 JDK 中还提供了三种不同的 Monitor 实现，也就是三种不同的锁：
    - 偏向锁（Biased Locking）
    - 轻量级锁
    - 重量级锁,这三种锁使得 JDK 得以优化 Synchronized 的运行，当 JVM 检测到不同的竞争状况时，会自动切换到适合的锁实现，这就是锁的升级、降级。
- 当没有竞争出现时，默认会使用偏向锁。
    - JVM 会利用 CAS 操作，在对象头上的 Mark Word 部分设置线程 ID，以表示这个对象偏向于当前线程，所以并不涉及真正的互斥锁，因为在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏斜锁可以降低无竞争开销。
- 如果有另一线程试图锁定某个被偏斜过的对象，JVM 就撤销偏斜锁，切换到轻量级锁实现。
- 轻量级锁依赖 CAS 操作 Mark Word 来试图获取锁，如果重试成功，就使用普通的轻量级锁；否则，进一步升级为重量级锁。

####  ReadWriteLock 
```shell 
final boolean tryWriteLock() {
            Thread current = Thread.currentThread();
            int c = getState();
            if (c != 0) {
                int w = exclusiveCount(c);
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                if (w == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
            }
            if (!compareAndSetState(c, c + 1))
                return false;
            setExclusiveOwnerThread(current);
            return true;
        }

        /**
         * Performs tryLock for read, enabling barging in both modes.
         * This is identical in effect to tryAcquireShared except for
         * lack of calls to readerShouldBlock.
         */
        final boolean tryReadLock() {
            Thread current = Thread.currentThread();
            for (;;) {
                int c = getState();
                if (exclusiveCount(c) != 0 &&
                    getExclusiveOwnerThread() != current)
                    return false;
                int r = sharedCount(c);
                if (r == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                if (compareAndSetState(c, c + SHARED_UNIT)) {
                    if (r == 0) {
                        firstReader = current;
                        firstReaderHoldCount = 1;
                    } else if (firstReader == current) {
                        firstReaderHoldCount++;
                    } else {
                        HoldCounter rh = cachedHoldCounter;
                        if (rh == null || rh.tid != getThreadId(current))
                            cachedHoldCounter = rh = readHolds.get();
                        else if (rh.count == 0)
                            readHolds.set(rh);
                        rh.count++;
                    }
                    return true;
                }
            }
        }
```
####  面向对象的五大基本原则(solid)
- S单一职责SRP:Single-Responsibility Principle
     一个类,最好只做一件事,只有一个引起它的变化。单一职责原则可以看做是低耦合,高内聚在面向对象原则的引申,将职责定义为引起变化的原因,以提高内聚性减少引起变化的原因。
- O开放封闭原则OCP:Open-Closed Principle
     软件实体应该是可扩展的,而不是可修改的。对扩展开放,对修改封闭
- L里氏替换原则LSP:Liskov-Substitution Principle
     子类必须能够替换其基类。这一思想表现为对继承机制的约束规范,只有子类能够替换其基类时,才能够保证系统在运行期内识别子类,这是保证继承复用的基础。
- I接口隔离原则ISP:Interface-Segregation Principle
     使用多个小的接口,而不是一个大的总接口
- D依赖倒置原则DIP:Dependency-Inversion Principle
     依赖于抽象。具体而言就是高层模块不依赖于底层模块,二者共同依赖于抽象。抽象不依赖于具体,具体依赖于抽象。
     
#### 类什么时候才被初始化
- 创建类的实例，也就是new一个对象
- 访问某个类或接口的静态变量，或者对该静态变量赋值
- 调用类的静态方法
- 反射（Class.forName("com.lyj.load")）
- 初始化一个类的子类（会首先初始化子类的父类）
- JVM启动时标明的启动类，即文件名和类名相同的那个类

#### ArrayList     
ArrayList创建时的大小为0；当加入第一个元素时，进行第一次扩容时，默认容量大小为10。
ArrayList每次扩容都以当前数组大小的1.5倍去扩容。
Vector创建时的默认大小为10。
Vector每次扩容都以当前数组大小的2倍去扩容。当指定了capacityIncrement之后，每次扩容仅在原先基础上增加capacityIncrement个单位空间。
ArrayList和Vector的add、get、size方法的复杂度都为O(1)，remove方法的复杂度为O(n)。
ArrayList是非线程安全的，Vector是线程安全的。

#### hashmap为什么初始容量是2的指数幂
1. hashmap在确定元素落在数组的位置的时候，计算方法是(n - 1) & hash，n为数组长度也就是初始容量 ，这是因为“取模”运算的消耗还是比较大的，那么如何保证(n - 1) & hash和hash%n的结果相同呢，当n为2的指数次幂时，会满足一个公式：(n - 1) & hash = hash % n，这样就可以用(n - 1) & hash的位运算来使计算更加高效。
2. 如果初始容量是奇数，那么（n-1)就为偶数，偶数2进制的结尾都是0，经过hash值&运算后末尾都是0，那么0001，0011，0101，1001，1011，0111，1101这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这样就会造成空间的浪费而且会增加hash冲突。
3. 只有是2的指数次幂的数字经过n-1之后，二进制肯定是  ...11111111  这样的格式，这种格式计算的位置的时候，完全是由产生的hash值类决定，而不受n-1 影响。这样会提高效率。比如要扩容了，2的幂次方*2，在二进制中比如4和8，代表2的2次方和3次方，他们的2进制结构相 似,比如 4和8   00000100    0000 1000   只是高位向前移了一位，这样扩容的时候，只需要判断高位hash,移动到之前位置的倍数就可以了，免去了重新计算位置的运算。并且这样可以保证(n - 1) & hash得到的存储位置是在hashmap的length之内的,也就是n之内。因为最大也就是hash值也全是...1111111

#### SpringBoot Start
1. 引入该Start相关依赖
2. 查找resources/META-INF/spring.factories下对应的XXXAutoConfigure
3. 根据Condition自己加装相关的Bean
    - @ConditionalOnBean:当容器中有指定的Bean的条件下  
    - @ConditionalOnClass：当类路径下有指定的类的条件下  
    - @ConditionalOnExpression:基于SpEL表达式作为判断条件  
    - @ConditionalOnJava:基于JVM版本作为判断条件  
    - @ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  
    - @ConditionalOnMissingBean:当容器中没有指定Bean的情况下  
    - @ConditionalOnMissingClass:当类路径下没有指定的类的条件下  
    - @ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  
    - @ConditionalOnProperty:指定的属性是否有指定的值  
    - @ConditionalOnResource:类路径下是否有指定的资源  
    - @ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean
    - @ConditionalOnWebApplication:当前项目是Web项目的条件下  

<https://www.cnblogs.com/yuansc/p/9088212.html>

#### Spring中解决循环依赖为什么要用三级缓存
- Bean创建有3步
    1. 初始化init,分配内存空间，此时在singletonFactories完成
    2. 注入各种属性，此时在earlySingletonObjects中
    3. 完美的bean最终会在singletonObjects中
- 举例
    - A与B循环依赖，A初始化经过第1、2步，在第2步发现依赖B
    - 此时，触发B的初始化进入第1步，如果再进入第2步，会发现依赖A了，所以此时B只能在第1步
    - 把B的第1步，不完美的B注入给A，先完成A的注入，让A进入第3步
    - 然后，再完成B的完美初始化

#### 关于NIO的 Channel与ByteBuffer
- Buffer的使用，主要是减少copy实现零拷贝，流的读写方式还是基于用户态和内核态的拷贝
- 从使用NIO读写文件说起——拆解堆外内存分配过程  <https://mp.weixin.qq.com/s/Wea1ubBTH9jXSZtU9NwVhw>
- 从操作系统看NIO <https://mp.weixin.qq.com/s/Titt2vOEtSWIzEbtWKQOzA>

#### 关于NIO的 空轮训的bug
```shell
while (true) {
    selector.select();  // select 可能在无就绪事件时异常返回！主要发生在linux系统

    Set<SelectionKey> readyKeys = selector.selectedKeys();
    Iterator<SelectionKey> it = readyKeys.iterator();

    while (it.hasNext()) {
        SelectionKey key = it.next();
        ...  // 处理事件
        it.remove();
    }
}
```
- selector.select() 应该 一直阻塞，直到有就绪事件到达，但很遗憾，由于 Java NIO 实现上存在 bug，select() 可能在 没有 任何就绪事件的情况下返回，从而导致 while(true) 被不断执行，最后导致某个 CPU 核心的利用率飙升到 100%，这就是臭名昭著的 Java NIO 的 epoll bug。
- 解决方法

```shell
selectCnt = 0;  // epoll 空轮询场景下 select 调用次数
long currentTimeNanos = System.nanoTime();  // 每个 for 循环开始时的绝对时间

for (;;) {
    timeoutMillis = ...  // 初始化超时参数

    int selectedKeys = selector.select(timeoutMillis);
    selectCnt++;

    long time = System.nanoTime();  // 记录执行到此处的绝对时间：

    // 检测逻辑
    if (time - currentTimeNanos > timeoutMillis) {
        selectCnt = 1;  // 未发生 epoll 空轮询，所以把 selectCnt 重置为 1
    } else if (selectCnt >= 重试次数阈值（默认 512）) {
        selector = selectRebuildSelector(selectCnt);  // 解决 epoll bug 的实际逻辑
        selectCnt = 1;  // 解决本次 epoll bug，重置 selectCnt
        break;
    }

    currentTimeNanos = time;  // 重置下次 for 循环开始时间
}
```
- <http://songkun.me/2019/07/26/2019-07-26-java-nio-epoll-bug-and-netty-solution/>

#### Netty零拷贝总结的比较清楚了
- 零拷贝
    - 在传统的I/O操作中，每次都需要把内核空间的数据拷贝到用户空间中，这样挺浪费空间的，所以零拷贝的出现就是为了解决这个问题。
    - 主要有两种方法：mmap+write 和 Sendfile
    - mmap+write
    - 使用mmap+write方式替换原来的read+write方式，mmap是一种内存映射文件的方法，即将一个文件或者其他对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对应关系。
        这样就可以省略掉原来内核Read缓冲区Copy数据到用户缓冲区，但是还是需要内核Read缓冲区将数据Copy到内核Socket缓冲区。
    - Sendfile
    - Sendfile是为了简化通过网络在两个通道内进行的数据传输过程。
    - 它不仅减少了数据复制，还减少了上下文次数的切换。数据传送只发生在内核空间里，所以减少了一次上下文切换，但是还是存在一次Copy。
        后来进行了改进，将Kernel Buffer中对应的数据描述信息（内存地址，偏移量）记录到相应的Socket缓冲区中，这样连内核空间中的一次CPU Copy也省掉了。
- Netty的零拷贝具体体现
    - Netty零拷贝主要体现在三个方面。
    - Netty的接收和发送ByteBuffer采用DirtectByteBuffer，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。
    - Netty在操作多个Channel时，使用CompositeChannelBuffer，它并不会开辟新的内存并复制所有ChannelBuffer内容，而是直接保存了所有ChannelBuffer的引用，并在子ChannelBuffer里进行读写，实现了零拷贝。
    - Netty的文件传输采用了transferTo方法，它可以直接将文件缓冲区的数据发送到目标Channel。
<https://mp.weixin.qq.com/s/mFhSemUjxxsp6RBpvT6Cmg>

#### Netty
- <https://www.cnblogs.com/xiaoyangjia/p/11526197.html>

#### Utf-8 是一种变长的编码方式
- 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。
- 对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。
    - 1110xxxx 10xxxxxx 10xxxxxx （3个字节，xxx放入Unicode）
- Little endian和Big endian 
    - Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做"零宽度非换行空格"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。
    - 如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。
                              
#### Redis与Memcached区别
如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：
1. Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。
2. Redis支持数据的备份，即master-slave模式的数据备份。
3. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
4. 在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别
5. memcache可以存储大文件

#### DNS 
- 在UDP协议栈上方
- 全面了解移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等 <http://www.52im.net/thread-2121-1-1.html>
- HTTPDNS 替代 LocalDNS
    1. 解决域名检验和多个子域名多个证书SNI（Server Name Indication 允许客户端向服务器提供它所请求的域名） 的问题
    - android 美图APP <http://www.52im.net/thread-2172-1-1.html>
    - ios <https://kangzubin.com/httpdns-https/>
    - 百度 <http://www.52im.net/thread-2472-1-1.html>

#### LVS之DR,NAT,TUN模式祥解 
- NAT：修改请求报文的目标IP，多目标IP的DNAT
- DR：操纵封装新的MAC地址
- TUN：在原请求IP报文之外新加一个IP首部
- FullNAT：修改请求报文的源和目标IP

#### Nat 与 打洞
- Nat技术 Net Address Transfer
    - 全锥型NAT：一旦内部主机端口对(iAddr:iPort)被NAT网关映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；任何一个外部主机发送到(eAddr:ePort)的报文将会被转换后发到(iAddr:iPort)。
    - 限制锥型NAT：在全锥基础上限制机器
    - 端口限制锥型NAT：在限制锥型NAT基础上限制端口
    - 对称型NAT：限制在固定的主机+端口，可以理解为是"Session级"
- p2p打洞原理是通过中间服务器S"伪装"连接，获取到P1与P2的公网IP+端口组合，然后P1与P2分别伪装S与彼此建立连接

- <http://www.52im.net/thread-542-1-1.html>
- <http://www.52im.net/thread-50-1-1.html>
- <https://blog.csdn.net/weiyuefei/article/details/52247497>

#### 内存泄漏
1. 内部类持有外部类 
2. 静态集合类
3. 各种连接的打开与关闭
4. 变量作用域不合理，比如类似逃逸
5. 改变了Hash算法，导致之前的hash key 对应的 value不能被释放
6. ThreadLocal内存泄漏，是因为内部的Map的key是通过虚引用关联的threadLocal，发生GC的时候key就消失了，造成Value泄漏。使用的时候记得显示remove
    <https://www.jianshu.com/p/1a5d288bdaee>
7. 监听器的回调绑定与取消

#### Direct Memory 回收
- DirectByteBuffer是通过虚引用(Phantom Reference)来实现堆外内存的释放的
- Cleaner是PhantomReference的子类，并通过自身的next和prev字段维护的一个双向链表。PhantomReference的作用在于跟踪垃圾回收过程，
    并不会对对象的垃圾回收过程造成任何的影响。 所以cleaner = Cleaner.create(this, new Deallocator(base, size, cap)); 
    用于对当前构造的DirectByteBuffer对象的垃圾回收过程进行跟踪。 当DirectByteBuffer对象从pending状态 ——> enqueue状态时，会触发Cleaner的clean()，
    而Cleaner的clean()的方法会实现通过unsafe对堆外内存的释放。

```shell 
        try {
            base = unsafe.allocateMemory(size);
        } catch (OutOfMemoryError x) {
            Bits.unreserveMemory(size, cap);
            throw x;
        }
        unsafe.setMemory(base, size, (byte) 0);
        if (pa && (base % ps != 0)) {
            // Round up to page boundary
            address = base + ps - (base & (ps - 1));
        } else {
            address = base;
        }
        // DirectByteBuffer 内 构建Cleaner对象用于跟踪DirectByteBuffer对象的垃圾回收，以实现当DirectByteBuffer被垃圾回收时，堆外内存也会被释放
        cleaner = Cleaner.create(this, new Deallocator(base, size, cap));
        // Cleaner 内 clean
        cleaner.clean()
        // Deallocator 继承 Runnable
        public void run() {
            if (address == 0) {
                // Paranoia
                return;
            }
            unsafe.freeMemory(address);
            address = 0;
            Bits.unreserveMemory(size, capacity);
        }
```
- java之HeapByteBuffer&DirectByteBuffer以及回收DirectByteBuffer <https://blog.csdn.net/xieyuooo/article/details/7547435>
- java nio 和 jvm 虚拟机参数的 XX:+DisableExplicitGC 的潜规则 <https://blog.csdn.net/phj88/article/details/8011830>
- Java网络编程和NIO详解8：浅析mmap和Direct Buffer <https://www.cnblogs.com/itxiaok/p/10357832.html>
- KAFKA推送消息用到了sendfile，落盘技术用到了mmap，DMA贯穿其中 <https://www.jianshu.com/p/7863667d5fa7>
- Java魔法类：Unsafe应用解析 <https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html>

#### JDK 各个版本特性
- Java5 ，2004-09-30发行
    - 泛型
    - 枚举
    - 自动装箱拆箱
    - 可变参数
    - 注解
    - foreach循环（增强for、for/in）
    - 静态导入
    - 格式化（System.out.println 支持%s %d等格式化输出）
    - 线程框架/数据结构 JUC
    - Arrays工具类/StringBuilder/instrument
- Java6
    - 开发代号为Mustang(野马),于2006-12-11发行。评价：鸡肋的版本，有JDBC4.0更新、Complier API、WebSevice支持的加强等更新。
- Java7
    - switch中添加对String类型的支持
    - 数字字面量的改进 / 数值可加下划
    - 异常处理（捕获多个异常） try-with-resources
    - 增强泛型推断
    - JSR203 NIO2.0（AIO）新IO的支持
    - JSR292与InvokeDynamic指令，可以调用其他语言生成的字节码
    - Path接口、DirectoryStream、Files、WatchService（重要接口更新）
    - fork/join framework 并行计算
- - Java8 2014年
    - Lambda     
- Java9 2017年9月1日
    - 平台级modularity（原名：Jigsaw） 模块化系统
    - Java 的 REPL 工具： jShell 命令
- Java10 2018年3月20日
    - 局部变量的类型推断 var关键字
    - GC改进和内存管理 并行全垃圾回收器 G1
- Java11 2018年9月26日
- 参考 <https://mp.weixin.qq.com/s/6PgdGCulBm3Q5o75MJQVAA>

####  Service Mesh Sidecar 
- <https://mp.weixin.qq.com/s/qH7j3eR6mPZrOaLnzSM_6A>
- Kubernetes 和 Istio ?
