---
layout: post
title:  "DotDot2"
date:   2020-07-20 10:46:00 +0900
comments: true
tags:
- Java
categories:
- 技术
---
#### 分布式控制方案
- 中心化的副本控制协议，也就是主从模式
- primary-secondary协议，也就是leader/follower（数据切片分段存储）
- 去中心化的副本控制协议，也就是Gossip或者zk选举阶段

#### 高可用、一致性、扩展性、性能
- 节点是否对等？写入是否同步副本？写入是代理还是直连？读取是读主还是读副？读取是代理还是直连？
- zk分leader/follower，是，写入代理给leader，读任意，直连
    (zk的follower有可能数据不是最新的，如果需要最新的可以调用sync()方法)
- es分primary/replica，是，写入协调节给primary，读任意，协调节点协调
    (此处的primary是指根据document路由而得到的primary shard，不是指单独的机器)
- kafka分leader/follower，是，写入直接给leader，读leader，直连leader
    (区别理解kafka中的leader/follower，本质是Partition数据的leader与follower会分布在不同的broker机器上，不会造成机器资源的不平衡)
- cassandra不分主次，写入多数quorum，写任意节点，读任意，读多个节点返回最新数据

<img src="/img/biu.jpg" width="600px" />

#### cassandra 
- Gossip协议 <https://www.jianshu.com/p/f1c251614bad?tdsourcetag=s_pcqq_aiomsg>

#### RAID(Redundant Array of Independent Disks,独立冗余磁盘阵列)
- 磁盘本地的互备容错高可用 <https://blog.csdn.net/Mr_Yang__/article/details/85228465>
#### Dubbo Monitor 实现原理?
- Consumer 端在发起调用之前会先走 filter 链;provider 端在接收到请求时也是 先走 filter 链，然后才进行真正的业务逻辑处理。
默认情况下，在 consumer 和 provider 的 filter 链中都会有 Monitorfilter。
1. MonitorFilter 向 DubboMonitor 发送数据
2. DubboMonitor 将数据进行聚合后(默认聚合 1min 中的统计数据)暂存到 ConcurrentMap<Statistics, AtomicReference> statisticsMap，然后使用一个 含有 3 个线程(线程名字:DubboMonitorSendTimer)的线程池每隔 1min 钟， 调用 SimpleMonitorService 遍历发送 statisticsMap 中的统计数据，每发送完毕 一个，就重置当前的 Statistics 的 AtomicReference
3. SimpleMonitorService 将这些聚合数据塞入 BlockingQueue queue 中(队 列大写为 100000)
4. SimpleMonitorService 使用一个后台线程(线程名为: DubboMonitorAsyncWriteLogThread)将 queue 中的数据写入文件(该线程以 死循环的形式来写)
5. SimpleMonitorService 还会使用一个含有 1 个线程(线程名字: DubboMonitorTimer)的线程池每隔 5min 钟，将文件中的统计数据画成图表
#### Dubbo SPI 和 Java SPI 区别?
- JDK SPI
JDK 标准的 SPI 会一次性加载所有的扩展实现，如果有的扩展吃实话很耗时，但 也没用上，很浪费资源。
所以只希望加载某个的实现，就不现实了
- DUBBO SPI
1. 对 Dubbo 进行扩展，不需要改动 Dubbo 的源码 
2. 延迟加载，可以一次只加载自己想要加载的扩展实现。
3. 增加了对扩展点 IOC 和 AOP 的支持，一个扩展点可以直接 setter 注入其 它扩展点。
4. Dubbo 的扩展机制能很好的支持第三方 IoC 容器，默认支持 Spring Bean。
#### Dubbo 如何优雅停机?
Dubbo 是通过 JDK 的 ShutdownHook 来完成优雅停机的，所以如果使用 kill -9 PID 等强制关闭指令，是不会执行优雅停机的，只有通过 kill PID 时，才 会执行。
#### RabbitMQ 消息基于什么传输?
由于 TCP 连接的创建和销毁开销较大，且并发数受系统资源限制，会造成性能瓶 颈。RabbitMQ 使用信道的方式来传输数据。信道是建立在真实的 TCP 连接内的 虚拟连接，且每条 TCP 连接上的信道数量没有限制。
#### Zookeeper 对于 Kafka 的作用是什么?
Zookeeper 是一个开放源码的、高性能的协调服务，它用于 Kafka 的分布式应用。 Zookeeper 主要用于在集群中不同节点之间进行通信
在 Kafka 中，它被用于提交偏移量，因此如果节点在任何情况下都失败了，它都 可以从之前提交的偏移量中获取
除此之外，它还执行其他活动，如: leader 检测、分布式同步、配置管理、识别新 节点何时离开或连接、集群、节点实时状态等等。
#### kafka 消费者如何不自动提交偏移量，由应用提交?
将 auto.commit.offset 设为 false，然后在处理一批消息后 commitSync() 或者 异步提交 commitAsync()
#### Pipeline 有什么好处，为什么要用 pipeline?
答:可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有 因果相关性。使用 redis-benchmark 进行压测的时候可以发现影响 redis 的 QPS 峰值的一个重要因素是 pipeline 批次指令的数目。
#### Jedis 与 Redisson 对比有什么优缺点?
答:Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命令 的支持;Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相比，功能 较为简单，不支持字符串操作，不支持排序、事务、管道、分区等 Redis 特性。 Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精力更 集中地放在处理业务逻辑上。
#### 说说 Redis 哈希槽的概念?
答:Redis 集群没有使用一致性 hash,而是引入了哈希槽的概念，Redis 集群有 16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽， 集群的每个节点负责一部分 hash 槽。
#### 假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以 某个固定的已知的前缀开头的，如果将它们全部找出来?
答:使用 keys 指令可以扫出指定模式的 key 列表。
对方接着追问:如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会 有什么问题?
这个时候你要回答 redis 关键的一个特性:redis 的单线程的。keys 指令会导致线 程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时 候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但 是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间 会比直接用 keys 指令长。
#### Mysql BLOB 和 TEXT 有什么区别?
- BLOB 是一个二进制对象，可以容纳可变数量的数据。TEXT 是一个不区分大小写 的 BLOB。
- BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小 写，对 TEXT 值不区分大小写。
#### 可以使用多少列创建索引?
任何标准表最多可以创建 16 个索引列。
#### NOW()和 CURRENT_DATE()有什么区别?
NOW()命令用于显示当前年份，月份，日期，小时，分钟和秒。 CURRENT_DATE()仅显示当前年份，月份和日期。
#### 完整性约束包括哪些?
数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。
分为以下四类:
1. 实体完整性:规定表的每一行在表中是惟一的实体。
2. 域完整性:是指表中的列必须满足某种特定的数据类型约束，其中约束又包括 取值范围、精度等规定。
3. 参照完整性:是指两个表的主关键字和外关键字的数据应一致，保证了表之间 的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。
4. 用户定义的完整性:不同的关系数据库系统根据其应用环境的不同，往往还需 要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束 条件，它反映某一具体应用必须满足的语义要求。
与表有关的约束:包括列约束(NOT NULL(非空约束))和表约束(PRIMARY KEY、 foreign key、check、UNIQUE) 。
#### 说说对 SQL 语句优化有哪些方法?(选择几条)
1. Where 子句中:where 表之间的连接必须写在其他 Where 条件之前，那些可 以过滤掉最大数量记录的条件必须写在 Where 子句的末尾.HAVING 最后。
2. 用 EXISTS 替代 IN、用 NOT EXISTS 替代 NOT IN。
3. 避免在索引列上使用计算
4. 避免在索引列上使用 IS NULL 和 IS NOT NULL
5. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉 及的列上建立索引。
6. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃 使用索引而进行全表扫描
7. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用 索引而进行全表扫描
####活锁:
任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试， 失败，尝试，失败。
活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而 处于死锁的实体表现为等待;活锁有可能自行解开，死锁则不能。
#### 饥饿:
一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执 行的状态。
Java 中导致饥饿的原因:
1、高优先级线程吞噬所有的低优先级线程的 CPU 时间。 
2、线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在它之前 持续地对该同步块进行访问。 
3、线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的 wait 方 法)，因为其他线程总是被持续地获得唤醒。
#### Java Concurrency API 中的 Lock 接口(Lock interface) 是什么?对比同步它有什么优势?
Lock 接口比同步方法和同步块提供了更具扩展性的锁操作。 他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的 条件对象。
它的优势有:
可以使锁更公平
可以使线程在等待锁的时候响应中断 可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间 可以在不同的范围，以不同的顺序获取和释放锁
整体上来说 Lock 是 synchronized 的扩展版，Lock 提供了无条件的、可轮询的 (tryLock 方法)、定时的(tryLock 带参方法)、可中断的(lockInterruptibly)、可多 条件队列的(newCondition 方法)锁操作。另外 Lock 的实现类基本都支持非公平 锁(默认)和公平锁，synchronized 只支持非公平锁，当然，在大部分情况下，非 公平锁是高效的选择。
#### SynchronizedMap 和 ConcurrentHashMap 有什么区 别?
- SynchronizedMap 一次锁住整张表来保证线程安全，所以每次只能有一个线程来 访为 map。
- ConcurrentHashMap 使用分段锁来保证在多线程下的性能。 ConcurrentHashMap 中则是一次锁住一个桶。ConcurrentHashMap 默认将 hash 表分为 16 个桶，诸如 get,put,remove 等常用操作只锁当前需要用到的桶。 这样，原来只能一个线程进入，现在却能同时有 16 个写线程执行，并发性能的提 升是显而易见的。
- 另外 ConcurrentHashMap 使用了一种不同的迭代方式。在这种迭代方式中，当 iterator 被创建后集合再发生改变就不再是抛出 ConcurrentModificationException，取而代之的是在改变时 new 新的数据从而 不影响原有的数据 ，iterator 完成后再将头指针替换为新的数据 ，这样 iterator 线程可以使用原来老的数据，而写线程也可以并发的完成改变。
#### 你如何确保 main()方法所在的线程是 Java 程序最后结束 的线程?
我们可以使用 Thread 类的 join()方法来确保所有程序创建的线程在 main()方法退 出前结束。
#### 为什么 wait(), notify()和 notifyAll ()必须在同步方法或 者同步块中被调用?
当一个线程需要调用对象的 wait()方法的时候，这个线程必须拥有该对象的锁，接 着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 notify() 方法。同样的，当一个线程需要调用对象的 notify()方法时，它会释放这个对象的 锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要 线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者 同步块中被调用。
#### 为什么 Thread 类的 sleep()和 yield ()方法是静态的?
Thread 类的 sleep()和 yield()方法将在当前正在执行的线程上运行。所以在其他 处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静 态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在 其他非运行线程调用这些方法。


