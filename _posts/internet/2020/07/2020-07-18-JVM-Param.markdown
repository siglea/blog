---
layout: post
title:  "  Jvm（三）参数一览"
date:   2020-07-18 11:10:00 +0900
comments: true
tags:
- Java
categories:
- 技术
---
#### UseCompressedOop
- CompressedOops原理：
64位地址分为堆的基地址+偏移量，当堆内存<32GB时候，在压缩过程中，把偏移量/8后保存到32位地址。在解压再把32位地址放大8倍，所以启用CompressedOops的条件是堆内存要在4GB*8=32GB以内。
CompressedOops，可以让跑在64位平台下的JVM，不需要因为更宽的寻址，而付出Heap容量损失的代价。 不过它的实现方式是在机器码中植入压缩与解压指令，可能会给JVM增加额外的开销。
- 零基压缩优化(Zero Based Compressd Oops)
零基压缩是针对压解压动作的进一步优化。 它通过改变正常指针的随机地址分配特性，强制堆地址从零开始分配（需要OS支持），进一步提高了压解压效率。要启用零基压缩，你分配给JVM的内存大小必须控制在4G以上，32G以下。
- 总结：
    - 如果GC堆大小在4G以下，直接砍掉高32位，避免了编码解码过程；
    - 如果GC堆大小在4G以上32G以下，则启用UseCompressedOop；
    - 如果GC堆大小大于32G，压指失效，使用原来的64位（所以说服务器内存太大不好......）。
<https://blog.csdn.net/liuxiao723846/article/details/91981757>
```shell
-Xms2g：初始化推大小为 2g；
-Xmx2g：堆最大内存为 2g；
-XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；
-XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；
–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；
-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；
-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；
-XX:+PrintGC：开启打印 gc 信息；
-XX:+PrintGCDetails：打印 gc 详细信息。
```

<img src="/img/jp1.jpg" width="600px" />
<img src="/img/jp2.jpg" width="600px" />
<img src="/img/jp3.jpg" width="600px" />
<img src="/img/jp4.jpg" width="600px" />
<img src="/img/jp5.jpg" width="600px" />
<img src="/img/jp6.jpg" width="600px" />
<img src="/img/jp7.jpg" width="600px" />