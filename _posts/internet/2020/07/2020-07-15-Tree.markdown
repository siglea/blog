---
layout: post
title:  "Tree"
date:   2020-07-15 11:47:00 +0900
comments: true
tags:
- 数据结构与算法
categories:
- 技术
---

<img src="/img/tree.jpg" width="600px" />

#### 各种树
- AVL 树具有以下特点：
    - 每个结点的平衡因子只可能是 -1、0、1（如果绝对值超过 1，则认为是失衡）
    - 每个结点的左右子树高度差不超过 1
    - 搜索、插入、删除的时间复杂度是 O(logn)

- 二叉搜索树（Binary Search Tree）是二叉树的一种，英文简称 BST。又称为二叉查找树、二叉排序树。
  - 它的特点是任何一个结点的值都大于其左子树的所有结点的值，任何一个结点的值都小于其右子树的所有结点的值。

- 红黑树是一种含有红黑结点并能自平衡的二叉搜索树。
    - 为了保证平衡，红黑树必须满足以下性质：
        1. 每个结点是要么是红色或黑色
        1. 根结点必须是黑色
        1. 叶结点（外部结点、空结点）是黑色
        1. 红色结点不能连续（也就是，红色结点的孩子和父亲都是黑色）
        1. 对于每个结点，从该点至 nil（树尾端，Java 中为 null 的结点）的任何路径都包含所相同个数的黑色结点
    
- B 树（Balanced Tree）是一种平衡的多路搜索树，多用于文件系统、数据库的实现。
  - 1个结点可以存储超过 2 个元素，可以拥有超过 2 个子结点
  - 拥有二叉搜索树的一些性质
  - 平衡，每个结点的所有子树高度一致
  - 比较矮
  
#### 数据库为什么用B树不用二叉树
 - 二叉树的高度以及建数过程，决定了磁盘的存储是分散的，导致读取时IO次数要远远高于B树

#### B+树相对B-树的优点
- B+树只有叶节点存放数据，其余节点用来索引，而B-树是每个索引节点都会有Data域。
- 所以从Mysql（Inoodb）的角度来看，B+树是用来充当索引的，一般来说索引非常大，尤其是关系性数据库这种数据量大的索引能达到亿级别。
- 所以为了减少内存的占用，索引也会被存储在磁盘上。那么Mysql如何衡量查询效率呢？– 磁盘IO次数。
- B-树/B+树 的特点就是每层节点数目非常多，层数很少，目的就是为了就少磁盘IO次数。
- 但是B-树的每个节点都有data域（指针），这无疑增大了节点大小，增加了磁盘IO次数，磁盘IO一次读出的数据量大小是固定的，单个数据变大，每次读出的就少，IO次数增多，一次IO多耗时。

- 所以我们可以看到B+树的优点：
1. B+树的层级更少。
    相较于B树B+每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快；
1. B+树查询速度更稳定。
    B+所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;
1. B+树天然具备排序功能。
    B+树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。
1. B+树全节点遍历更快。
    B+树遍历整棵树只需要遍历所有的叶子节点即可，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。

#### 参考  
- 树 <https://mp.weixin.qq.com/s/sq8rJBtT5mcDYh2ycBuX4g>
- 为什么Mysql用B+树做索引而不用B-树或红黑树？<http://www.coder55.com/question/139>
 