---
layout: post
title:  " Jvm（四）Note"
date:   2020-07-15 14:40:00 +0900
comments: true
tags:
- Java
categories:
- 技术
---
#### Class文件
<img src="/img/class.jpg" width="600px" />

- Magic Number：4字节，0xCAFEBABE
- minor_version/major_version：JDK版本号，向下兼容
- constant_pool_count/constant_pool：常量池（javap -verbose可以输出.class内容)
- access_flags：表示class是类或者接口、是否public、是否abstract、是否final
- this_class/super_class/interfaces_count/interfaces：
- fields/fields_count，methods/methods_count
- attributes/attributes_count：属性可以出现在class文件的很多地方，而不只是出现在attributes列表里。如果是attributes表里的属性，那么它就是对整个class文件所对应的类或者接口的描述；如果出现在fileds的某一项里，那么它就是对该字段额外信息的描述；如果出现在methods的某一项里，那么它就是对该方法额外信息的描述。
    1. Code：使用在方法表里，Java代码编译成的字节码指令。
        - 可以查看虚拟机字节码指令表 <https://www.cnblogs.com/magexi/p/11822910.html>
        - 虚拟机规范一个方法不允许超过 65535条字节码指令
        - 如果把一个Java程序中的信息分为代码(Code，方法体里面的Java代码)和元数据(Metadata，包括类、字段、方法定义及其他信息)，
            那么在整个Class文件中，Code属性用于描述代码，所有的其他属性用于描述元数据。
    2. Exception
    3. LineNumberTable：Java源码的行号与字节码指令的对应关系
    4. LocalVariableTable属性：用于描述栈帧中局部变量表中的变量与Java源代码中定义的变量之间的关系。
    5. SourceFile：源代码名字
    6. ConstantValue属性：通知虚拟机自动为静态变量赋值
    7. InnerClasses属性
    8. Synthetic属性：代表此字段或方法并不是由Java源代码直接产生的，而是由编译器自行添加的（如:init)
    9. StackMapTable属性：会在虚拟机类加载的字节码验证阶段被新类型检查验证器使用。
    10. Signature：泛型
    11. BootstrapMethods属性：用于保存invokeDynamic指令引用的引导方法限定符。
    12. RuntimeVisibleAnnotations：为动态注解提供支持
- 案例看下
```java
public class TestClass{
    private int m ;
    public int inc(){
        return m + 1;
    }
}
```
<img src="/img/class_code.jpg" width="600px" />
<img src="/img/class_javap.jpg" width="600px" />

#### 字节码指令集（200多个，不超过256）
- 加载和存储指令：iload、istore、bipush等
- 运算指令：iadd、isub、imul、idiv、ior、iand等
- 类型转换指令：i2b、i2c、i2s等
- 对象创建与访问指令：new、newarray、putfield、getfield、arraylength等
- 操作栈管理指令：pop、dup、 swap等
- 控制转移指令：ifeq、iflt、ifle等
- 方法调用和返回指令：
    - invokevirtual：抽象/虚拟方法
    - invokeinterface：接口方法
    - invokespecial：init、私有、父类方法
    - invokestatic：静态方法
    - invokedynamic指令用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法，
        前4条调用指令的分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑由用户所设定的引导方法决定的。
- 异常处理指令：throw（catch用异常表来实现）
- 同步指令：monitorenter 、monitorexit

#### 类加载机制
- 加载
    - 加载时机：new、invocke static；反射调用；子类依赖的父类；main类；jdk1.7后的动态语言支持REF_getStatic
    - 除了上述5种场景，其他的方式都是被动引用（如：访问类常量、创建对象数组等），不会触发初始化。
    - 加载渠道：zip包类(Jar/Ear/War)；网络类(Applet)；动态代理生成；JSP等
- 验证
    - 文件格式验证：版本号、类型、常量类型等
    - 元数据验证：类继承实现是否正确完整等Java语言规范
    - 字节码验证：字节码语义验证、安全验证、类型推断验证（StackMapTable优化了类型推断）
    - 符号引用验证：为确保解析动作能正常运行，类名、访问权限等核实
- 准备
    - 为类变量分配内存，并设置初始化"零值"（final直接赋值）
- 解析
    - 把符号引用替换为直接引用
    - 正式解析类、字段、方法，解析失败会出现IllegalAccessError、NoSuchFieldError、NoSuchMethodError
- 初始化
    - clinit()方法执行、虚拟机保证该方法现成安全

#### 破坏双亲委派
- JDK1.2通过覆盖loadClass实现自定义加载器，之后应是把自己的加载逻辑放到findClass中
- SPI机制通过 ThreadContextClassLoader的方式，父加载器可以实现委派下级进行加载。比如BootstrapClassLoader
    需要使用到了classpath下的class，但是自己只能加载固定目录下，就需要委派AppClassLoader来替它加载
- OSGI动态热部署等

#### 虚拟机字节码执行引擎
- 在不同的虚拟机实现里会有解释执行（解释器执行）和编译执行（通过即时编译器产生本地代码执行）两种方式。
- 运行时栈帧结构
    - 每个线程包含多个栈帧
    - 局部变量表
        - 局部变量表的容量以变量槽(Variable Slot)为最小单位(32位/64位)
        - 第0位，表示this
        - Slot可以被复用一变节省空间，比如把不用的对象=null，就可以把该对象占用的空间让出来，但是=null有可能被编译器优化擦出掉或者jvm会优化这种操作
        - 局部变量需要明确初始化，不会给初始化"零值"
    - 操作栈
    - 动态连接
        - Class文件中的符号引用在运行期间转换为直接引用，就是指动态连接
    - 返回地址
        - 方法退出的过程实际上就等同于把当前栈帧出栈，因此退出时可能执行的操作有：
            恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈帧的操作数栈中，
            调整PC计时器的值以指向方法调用指令后面的一条指令等。
- 方法调用
    - 方法调用阶段唯一的任务就是确定被调用的方法的版本，暂时还不涉及方法内部的具体运行过程。
      在程序运行时，进行方法调用是最普遍、最频繁的操作，但前面已经讲过，Class文件的编译过程中
      不包含传统编译中的连接步骤，一起方法调用在Class文件里面存储的都只是符号引用，而不是方法
      在实际运行时内存布局中的入口地址（直接引用）。这个特性给Java带来了更强大的动态扩展能力，
      但也使得Java方法调用过程变得相对复杂起来，需要再类加载期间，甚至到运行期间才能确定目标方法的直接引用。
    - 编译器可知，运行期不可变
    - 2大类方法
        1. 非虚方法：通过invokestatic/invokespecial调用的诸如静态、私有、构造、父类方法这4类，在解析阶段就确定了
        1. 虚方法：抽象，多态。
            - 静态分派：方法重载
            - 动态分派：方法重写
                - 动态单分派
                - 通过方法表来优化查找性能
- 动态性 
    - 何为动态语言？变量无类型而变量值才有类型。
    - Java动态性实现从JDK1.7开始 <https://blog.csdn.net/zero__007/article/details/107304054>
        - java.lang.invoke包MethodHandler
        - invokedynamic字节码指令
        - Reflection与MethodHandle机制都是在模拟方法调用，Reflection是在Java代码层次，而MethodHandl是在模拟字节码层次
        - Reflection是重量级的能映射整个方法相关的信息，MethoudHandle仅仅是方法调用
        - Reflection是为Java语言服务的，MethodHandle是为所有Java虚拟机之上的语言服务

```java
public class Test{
    public static void test0() throws Throwable {
        // 通过MethodType的静态工厂方法构造 MethodType
        MethodType methodType = MethodType.methodType(void.class, String.class);
        // 获取方法句柄
        MethodHandle methodHandle = MethodHandles.lookup()
            .findVirtual(User.class, "say", methodType);
        User user = new User();
        methodHandle.invoke(user, "zero");
        // invoke和invokeExact方法, invokeExact方法与直接调用底层方法是一样的
        methodHandle.invokeExact(user, "zero");
    }
}
```

```java
public class Test{
    public void useConstantCallSite() throws Throwable {  
        MethodHandles.Lookup lookup = MethodHandles.lookup();  
        MethodType type = MethodType.methodType(String.class, int.class, int.class);  
        MethodHandle mh = lookup.findVirtual(String.class, "substring", type);
        
        ConstantCallSite callSite = new ConstantCallSite(mh);  
        MethodHandle invoker = callSite.dynamicInvoker();  
        String result = (String) invoker.invoke("Hello", 2, 3);  
    } 
}
```
        

- 执行引擎
    - 编译执行/解释执行
    - JIT编译(just-in-time compilation)狭义来说是当某段代码即将第一次被执行时进行编译,因而叫“即时编译”
    - 基于栈的指令集 与 基于寄存器的指令集 （Android Dalvik VM)
    <img src="/img/exec.jpg" width="600px" />
    
#### 类加载及执行子系统案例
- tomcat
    - 放置在 /common 目录中：类库可被 Tomcat 和所有的 Web 应用程序共同使用。CommonClassLoader
    - 放置在 /server 目录中：类库可被 Tomcat 使用，对所有的 Web 应用程序都不可见。CatalinaClassLoader
    - 放置在 /shared 目录中：类库可被所有的 Web 应用程序共同使用，但对 Tomcat 自己不可见。SharedClassLoader
    - 放置在 /WebApp/WEB-INF 目录中：类库仅仅可以被此 Web 应用程序使用，对 Tomcat 和其他 Web 应用程序都不可见 WebAppClassLoader
- OSGi：灵活的类加载器架构
    - OSGi（Open Service Gateway Initiative） 是 OSGi 联盟（OSGi Alliance）制定的一个基于 Java 语言的动态模块化规范
- 字节码生成技术与动态代理的实现
    - javac、Javassit、CGlib、ASM
    - JDK Proxy，也是生成字节码，用完删除了而已
        - Proxy.newProxyInstance() 
        - sun.misc.ProxyGenerator.generateProxyClass()
        - System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");
- Retrotranslator 的作用是将 JDK 1.5 编译出来的 Class 文件转变为可以在 JDK 1.4 或 1.3 上部署的版本

<https://blog.csdn.net/u013678930/article/details/51995251>

#### 早期（编译期）优化
- 编译器类型
    - 前端编译器：把java变为class，如Sun的Javac、Eclipse JDT中的增量式编译器(ECJ)
    - JIT编译器：运行时把 class字节码转变成机器码，如HotSpot VM的 C1、C2编译器
    - AOT编译器：直接把java编译成本地机器码，如GNU Compiler for the Java (GCJ)、Excelsior JET
- 编译过程
    - 解析与填充符号表过程
    - 插入式注解处理器的注解处理过程
    - 分析与字节码生成过程
- 泛型与类型擦除(Signature、LocalVariableTypeTable从JDK1.6之后用于解决此特性带来的问题)
- 自动装箱、拆箱与遍历循环
- Annotation Processor是javac的一个工具，它用来在编译时扫描和处理注解，通过Annotation Processor可以获取到注解和被注解类的相关信息，
    然后根据注解自动生成Java代码，省去了手动编写，提高了编码效率。(javac -processor)
    - Hibernate Validator Annotation Processor
    - Project Lombok

#### 晚期运行期优化    
- 主流的虚拟机采用解释器与编译器并存的架构 (java -version  mixed mode)，为了再启动响应速度和运行效率之间达到最佳平衡，
    hotSpot虚拟机还会逐渐启用分层编译（Tiered Compilation）的策略。
    - 解释器，一遍运行一遍把字节码解释为本地机器码 [0层]
    - 编译器，把字节码编译成为本地机器码并缓存起来 
        - C1（Client Compiler），更高的编译速度   [1层]
        - C2 (Server Compiler)，更好的编译质量   [2层]
- 热点代码：在运行过程中会被即时编译器编译的代码 也就是HotSpot的名称来源
    - 被多次调用的方法：由方法调用触发编译，也是标准的JIT编译方式
        - Invocation Counter，超过阈值触发JIT编译 
        - C1默认：1500次 C2：10000次
        - -XX：CompileThreshold
        - 可以设置衰减周期：CounterHalfLifeTime
    - 被对此执行的循环体：由循环体，关联出所在的方法，发生在方法执行过程中，因此被称为栈上替换OSR (On Stack Replacement)
        - Back Edge Counter，字节码遇到控制流向后跳转的指令后统计次数，为了触发OSR
        - CompileThreshold * OnStackReplacePercentage / 100
        - C1: 13995,C2：10700
- 热点探测的判断方法
    - 基于采样（Sample Based Hot Spot Detection)，周期性检查各个线程的栈顶。缺点是受线程阻塞等因素影响会不准
    - 基于计数器（Counter Based Hot Spot Detection)，统计方法的执行次数。缺点是无法知道调用关系。
- 编译过程
    - C1
        - 字节码 ->方法内联、常量传播 -> HIR High level Intermediate Representation (SSA Static Single Assignment形式)
        - HIR -> 空置检查消除、范围检查消除 -> LLR Low-Level Intermediate Representation
        - LIR -> 寄存器分配、窥孔优化 -> 本地机器码
    - C2,相对于C1更加缓慢，提高代码质量，进一步减少本地代码的执行时间
        - 无用代码消除 Dead Code Elimination
        - 循环展开 Loop Unrolling
        - 循环表达式外提 Loop Expression Hoisting
        - 消除公共子表达式 Common Subexpression Elimination
        - 常量传播 Constant Propagation
        - 基本块重排序 Basic Block Reordering
        - 范围检查消除 Range Check Elimiation
        - 数组边界检查消除 Array Bounds Checking Elimination：JAVA数组的方位不是通过裸指针，所以每次都需要检查是否越界
            可以通过数据流分析推断出取值范围，就可以把检查消除
        - 逃逸分析 Escape Analysis
            - 当一个对象在方法中被定义后，它可能被外部方法所引用
            - 逃逸分析带来的好处：栈上分配，同步消除、标量替换
                1. 同步消除。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。
                1. 将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。
                1. 分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。
            - 缺点：不确定逃逸对象的比例，反而会浪费性能
            - -XX:+DoEscapeAnalysis 开启逃逸分析，JDK1.7默认开启
            - <https://blog.csdn.net/w372426096/article/details/80333657>
            - <https://blog.csdn.net/hollis_chuang/article/details/80922794>
- Java 与 C++ 编译器对比
    - Java编译器占用用户时间
    - Java语言是动态的类型安全语言，意味值需要频繁检测空指针、数字越界、类型转换，总体耗时
    - 运行时多态选择频率远远大于C/C++
    - Java对象内存分配在只能再堆上，造成局部对象不能随之栈消失被回收

#### 线程与内存模型
- 缓存一致性 Cache Coherence，解决CPU高速缓存与主内存数据一致性。如MSI、FireFly等协议
- 指令重排 Instruction Reorder，与处理器乱序执行OutOfOrder Execution类似，使得处理器内部的运算单元尽可能被充分利用
- Java内存模型：所有变量储存在主内存Main Memory、每条线程还有自己的工作内存Working Memory
    - read/load : 从主内存读取到工作内存
    - store/write ：从工作内存写入主内存
    - use：从工作内存传递给执行引擎
    - assign：工作引擎赋值给工作内存
    - lock/unlock：在主内存锁定或解锁变量
- volatile：
    - 保证可见性：本质上volatile变量也可以存在不一致的情况，但由于每次使用前都要先刷新，执行引擎看不到不一致的情况
    - 禁止指令重排：通过插入内存屏障指令来实现，因此写操作会比普通变量慢
    - 非原子性的i++之类的操作仍然会出现问题
- long/double这种64位的数据，几乎所有虚拟机厂商都实现读写原子性，所以可以不需要声明为volatile
- 先行发生原则 happen before，只要遵循以下几个原则就是有顺序保障的，否则可能被重排。也就是说我们考虑并发问题
    不要看先后发生的时间顺序，而一切以先行发生原则为准
    - 程序次序规则 Program Order Rule
    - 管程锁定规则 Monitor Lock Rule
    - volatile变量规则 Volatile Variable Rule
    - 线程启动、终止、中断规则
    - 对象终结规则 init 先于 finalize
    - 传递性 Transitivity
- Java线程实现
    - JDK1.2之前，是用用户线程
    - JDK1.2及之后，是用操作系统的线程来实现
- Java线程调度
    - 协同式线程调度 Cooperative Thread-Scheduling，线程执行时间由自己控制，会造成各种阻塞不让出资源
    - 抢占式线程调度 Preemptive Threads Scheduling，由操作系统分配执行时间，Java使用该方式，可以指定线程优先级但是不一定起作用
- 线程状态
    - 新建 New：尚未启动的状态
    - 运行 Runable，对应操作系统中的Running和Ready，可以是正在执行也可以是等待CPU分配时间
    - 等待 Waiting
        - 无限期等待：Object.wait/Thread.join/LockSupport.park
        - 限期等待：Thread.sleep/Object.wait timeout/Thread.join timeout/LockSupport.parkNanos timeout/LockSupport.parkUntil timeout
    - 阻塞 Blocked
        - 阻塞与等待的区别：阻塞是在等待这获取到一个排他锁，等待状态是在等待时间或者被唤醒
        - 在程序等待进入同步区域的时候会进入该状态
    - 结束 Terminated
- 线程安全的实现方法
    - 互斥同步
    - 非阻塞同步/乐观锁，乐观锁的实现依赖于"硬件指令集的发展"
            - 测试并设置 Test-and-Set
            - 获取并增加 Fetch-and-Increment
            - 交换 Swap
            - 比较并交换 CAS
            - 加载链接/条件存储
    - 无同步
- 自旋锁，单纯自旋等待前面的锁定释放
- 偏向锁、轻量级锁、重量级锁

<img src="/img/lock_optimize.jpg" width="600px" />
    
#### 总览 
- <https://www.cnblogs.com/linghu-java/category/855958.html>