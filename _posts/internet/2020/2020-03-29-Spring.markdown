---
layout: post
title:  " SpringBoot "
date:   2020-03-27 23:25:00 +0900
comments: true
tags:
- Java
- Spring
categories:
- 技术
---
#### Spring Boot 是什么？
- Spring 是一个“引擎”；
- Spring MVC 是基于Spring的一个 MVC 框架；
- Spring Boot 是基于Spring的条件注册的一套快速开发整合包。

#### SpringBoot启动原理 ☆☆☆
```java
package org.springframework.boot;
public class SpringApplication {
    public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
            // ... 省略代码
            this.resourceLoader = resourceLoader;
            Assert.notNull(primarySources, "PrimarySources must not be null");
            this.primarySources = new LinkedHashSet(Arrays.asList(primarySources));
            // 1. 推测ApplicationType
            this.webApplicationType = WebApplicationType.deduceFromClasspath();
            // 2. 根据spring.factories初始化ApplicationContextInitializer 与 ApplicationListener
            this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));
            this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));
            // 3. 推测 Main入口
            this.mainApplicationClass = this.deduceMainApplicationClass();
    }
    public ConfigurableApplicationContext run(String... args) {
        // ... 省略代码
        ConfigurableApplicationContext context = null;
        Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList();
        this.configureHeadlessProperty();
        SpringApplicationRunListeners listeners = this.getRunListeners(args);
        // 4. SpringApplicationRunListeners生命周期之started()
        listeners.starting();
        // ... 省略代码
       Collection exceptionReporters;
       ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
       // 5. 准备环境 及 SpringApplicationRunListeners生命周期之environmentPrepared()
       ConfigurableEnvironment environment = this.prepareEnvironment(listeners, applicationArguments);
       this.configureIgnoreBeanInfo(environment);
       Banner printedBanner = this.printBanner(environment);
       context = this.createApplicationContext();
       exceptionReporters = this.getSpringFactoriesInstances(SpringBootExceptionReporter.class, new Class[]{ConfigurableApplicationContext.class}, context);
       // 6. 初始化类加载器、bean产生器、资源加载器等，打印banner
       this.prepareContext(context, environment, listeners, applicationArguments, printedBanner);
       // 7. 触发 @EnableAutoConfiguration 自动装配相关beans及configuration等
       //    SpringApplicationRunListeners生命周期之contextPrepared()/contextLoaded()
       this.refreshContext(context);
       this.afterRefresh(context, applicationArguments);
       stopWatch.stop();
       if (this.logStartupInfo) {
           (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), stopWatch);
       }
       listeners.started(context);
       this.callRunners(context, applicationArguments);
       listeners.running(context);
       // ... 省略代码
    }
}
```

- 启动原理解析 
<http://tengj.top/2017/03/09/springboot3/>
- 自动装配之@ComponentScan详解
<https://blog.csdn.net/mapleleafforest/article/details/86623578>
- 自动装配之@EnableAutoConfiguration详解
<https://blog.csdn.net/mapleleafforest/article/details/87273213>

#### SpringBoot自动配置 ☆☆☆
- SpringBoot项目配置注解@EnableAutoConfiguration后
- SpringBoot启动扫描META-INF下的spring.factories
- spring.factories子配置项org.springframework.boot.autoconfigure.EnableAutoConfiguration配置了所有可以自动配置的组件
- 各个XXXAutoConfiguration按照各自的ConditionalOnClass/OnBean等，判断是否加载XXX配置
- 根据XXX配置的@Import加载相关的其他类，之后通过反射机制初始化Bean
- 之后即可通过注入的方式使用
```java
// 比如DataSourceAutoConfiguration的自动配置是检测到DataSource.class 与 EmbeddedDatabaseType.class存在
// DataSource是javax包中自带，而EmbeddedDatabaseType存在于spring-boot-starter-jdbc中
// 因此在pom中引入spring-boot-starter-jdbc后，即可触发加载操作
// 接下来就是根据spring.datasource相关配置初始化PooledDataSource 或者 直接使用EmbeddedDatabase
@Configuration
@ConditionalOnClass({DataSource.class, EmbeddedDatabaseType.class})
@EnableConfigurationProperties({DataSourceProperties.class})
@Import({DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class})
public class DataSourceAutoConfiguration {
}
// 
```
DataSourceAutoConfiguration解析
<https://blog.csdn.net/kangsa998/article/details/90231518>
#### SpringBoot的Starter ☆☆☆
- 徒手撸一个SpringBoot中的Starter ，解密自动化配置黑魔法！
<https://www.cnblogs.com/lenve/p/10892011.html>

- SpringBoot启动机制（starter机制）核心原理详解

<https://www.jianshu.com/p/d166d935217b>

- 实现一个Spring boot stater

<https://www.jianshu.com/p/fdb574e1f77c>

#### SpringBoot常用注解
```
@Conditional
@SpringBootConfiguration
@EnableAutoConfiguration
@SpringBootApplication
@Configuration：代表这个类是一个配置类。
@ComponentScan：用来扫描指定包下面的注解类。
@Import：用来导入其他的@Configuration配置类。
@ImportResource：用来导入xml配置文件，比如某些配置一定要xml配置。
@Bean：用来定义一个bean，可以指定初始、销毁方法，及bean范围等。
@Controller 标识一个类为控制器。
@RequestMapping URL的映射。
@ResponseBody 返回结果转换为JSON字符串。
@RequestBody 表示接收JSON格式字符串参数。
@RestController这个注解，而不是@Controller，不过这个注解同样不是Spring boot提供的，而是Spring MVC4中的提供的注解，表示一个支持Restful的控制器。
这个类中有三个URL映射是相同的，即都是/article/{id}，这在@Controller标识的类中是不允许出现的。这里的可以通过method来进行区分，produces的作用是表示返回结果的类型是JSON。
@PathVariable这个注解，也是Spring MVC提供的，其作用是表示该变量的值是从访问路径中获取。
```
27个核心注解
<https://mp.weixin.qq.com/s/E2DyzV1cgUn1T5PfE92KSA>
#### SpringWebApplication 与 Servlet
- Servlet是JavaWeb的核心，可以理解为CGI的Java线程版本
- SpringMVC核心用到DispatcherServlet，可以配置多个urlMapping
- Struts2/SpringMVC是基于Servlet实现分发，而Struts1是基于Filter
- 一个SpringWebApplication可以定义多个Servlet，需要区分urlMapping

#### SpringBoot 中的 Tomcat 是如何启动的？
<https://mp.weixin.qq.com/s/qpLgkXOkccwCQbWoaEpqUQ>

#### SpringJDBC / Mybatis / Spring Data / JPA
- Mybatis的集成和使用
<https://blog.lqdev.cn/2018/12/03/springboot/chapter-thirty-five/>
- Mybatis-plus的集成和使用
<https://blog.lqdev.cn/2018/07/21/springboot/chapter-nine/>

#### Spring Security / Apache Shrio / JWT JavaWebToken

#### SpringBoot 打出来的war中的web.xml消失了
springboot 是如何帮我们省去web.xml配置的

<https://www.jianshu.com/p/3c94d7e76998?utm_source=oschina-app>
#### WebMvcConfigurerAdapter 与 WebMvcConfigurationSupport
(遇到的一个坑查了半天)
<https://blog.csdn.net/innovationad/article/details/79959383>

#### SpringBoot之Actuator
- Spring Boot Actuator:健康检查、审计、统计和监控
<https://www.jianshu.com/p/d5943e303a1f>
- 监控管理之Spring Boot Admin使用
<https://blog.lqdev.cn/2018/09/14/springboot/chapter-twenty-eight/>

#### SpringBoot日志管理之AOP统一日志 
<https://blog.lqdev.cn/2018/08/24/springboot/chapter-twenty-four/>

#### SpringBoot日志管理之追加统一traceId
```java
import org.slf4j.MDC;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class LogTraceInterceptor extends HandlerInterceptorAdapter {


    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        MDC.put(Constant.traceId, Constant.traceId+":"+RandomHelper.generateNonceNumStr(8));
        return super.preHandle(request, response, handler);
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        super.postHandle(request, response, handler, modelAndView);
        MDC.remove(Constant.traceId);
    }
}
```
```xml
 <appender name="xhs" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/app.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/app.%d{yyyy-MM-dd}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %X{traceId} [%thread] %-5level %c{10} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
</appender>
```
#### SpringBoot & Dubbo
<https://blog.lqdev.cn/2018/09/28/springboot/chapter-twenty-nine/>

#### SpringBoot 异步的各种实现
- 异步开发之异步请求 
<https://blog.lqdev.cn/2018/08/16/springboot/chapter-twenty/>
- 异步开发之异步调用
<https://blog.lqdev.cn/2018/08/17/springboot/chapter-twenty-one/>

<https://mp.weixin.qq.com/s/wjc9ImJfxcYpyAKEw-3AgA>
- 事件的发布和监听
<https://blog.lqdev.cn/2018/11/06/springboot/chapter-thirty-two/>
- RabbitMQ的集成和使用 
<https://blog.lqdev.cn/2018/07/24/springboot/chapter-twelve/>

<https://blog.lqdev.cn/2019/07/21/springboot/chapter-thirty-eight/>

#### SpringBoot & WebService
- Spring web Servcies集成和使用 
<https://blog.lqdev.cn/2018/11/09/springboot/chapter-thirty-three/>
- CXF构建WebService服务 
<https://blog.lqdev.cn/2018/11/12/springboot/chapter-thirty-four/>

#### LTW In Jdk Or SpringBoot
<https://www.cnblogs.com/takumicx/p/10150344.html>

#### 集成框架Spring Integration, Mule ESB or Apache Camel比较
<https://www.jdon.com/soa/integration-framework-comparison-spring.html>
<https://www.jianshu.com/p/68aba8d09a89>
