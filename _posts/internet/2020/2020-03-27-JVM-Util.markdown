---
layout: post
title:  " JVM 常用工具 "
date:   2020-03-27 23:25:00 +0900
comments: true
tags:
- Java
categories:
- 技术
---
#### JPS JVM Process Status Tool
```shell
jps
31856 xhs-push.jar
22640 Jps

jps -q
31856
22640

[root@VM_0_17_centos ~]# jps -m
31856 xhs-push.jar --push.queue=message_queue_low
22825 Jps -m

[root@VM_0_17_centos ~]# jps -l
31856 /home/web/xhs-push/xhs-push.jar
22886 sun.tools.jps.Jps

[root@VM_0_17_centos ~]# jps -v
31856 xhs-push.jar -Xms256m -Xmx512m -XX:+PrintGCDateStamps -XX:+PrintGC -Xloggc:...
22932 Jps -Dapplication.home=/usr/java/jdk1.8.0_171-amd64 -Xms8m

```

#### jstat: JVM Statistics Monitoring Tool 可以实时监测系统资源占用与jvm运行情况
- 类加载相关 -class
- gc相关 -gc*
- 编译相关 -compiler

```
## 命令语法结构：
Usage: jstat -help|-options
       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]
## 参数解释：
Options — 选项，我们一般使用 -gcutil 查看gc情况
-t      — 输出Timestamp
vmid    — VM的进程号，即当前运行的java进程号
interval– 间隔时间，单位为秒或者毫秒
count   — 打印次数，如果缺省则打印无数次
 
S0  — Heap上的 Survivor space 0 区已使用空间的百分比
S1  — Heap上的 Survivor space 1 区已使用空间的百分比
E   — Heap上的 Eden space 区已使用空间的百分比
O   — Heap上的 Old space 区已使用空间的百分比
P   — Perm space 区已使用空间的百分比
YGC — 从应用程序启动到采样时发生 Young GC 的次数
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
FGC — 从应用程序启动到采样时发生 Full GC 的次数
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)

## jstat -options
    -class 类加载统计
    -compiler 编译统计 
    -gc
    -gccapacity
    -gccause Allocation Failure
    -gcmetacapacity 元数据空间统计
    -gcnew
    -gcnewcapacity
    -gcold
    -gcoldcapacity
    -gcutil 总结垃圾回收统计
    -printcompilation JVM编译方法统计

## 示例1 总结垃圾回收统计
[root@VM_0_8_centos ~]# jstat -gcutil 27472 1000 5
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
 78.04   0.00  14.10  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  24.05  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  34.14  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  40.62  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  47.20  61.31  96.88  94.27    288    5.612     4    3.335    8.947

## 示例2 类加载统计
[root@VM_0_8_centos ~]# jstat -class -t 27472 1000 5
Timestamp       加载class的数量  所占用空间大小  未加载数量  未加载占用空间     Time(秒)
Timestamp       Loaded  Bytes  Unloaded  Bytes     Time
         5359.3  10847 20148.1        0     0.0      46.25
         5360.4  10847 20148.1        0     0.0      46.25
         5361.4  10847 20148.1        0     0.0      46.25
         5362.3  10847 20148.1        0     0.0      46.25
         5363.3  10847 20148.1        0     0.0      46.25

```
jstat命令使用
<https://www.cnblogs.com/lizhonghua34/p/7307139.html>

#### jinfo java配置信息
```shell
 -flags               to print VM flags
 -sysprops            to print Java system properties
 <no option>          to print both of the above
```

#### jmap : Memory Map For Java 内存占用情况查询
```shell
## 查询某个pid进程对应的应用程序内存占用情况
jmap -heap pid
 
## 示例1
jmap -heap 5940

[root@VM_0_8_centos ~]# jmap -heap 27472
Attaching to process ID 27472, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.171-b11

using thread-local object allocation.
Parallel GC with 2 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 2051014656 (1956.0MB)
   NewSize                  = 42991616 (41.0MB)
   MaxNewSize               = 683671552 (652.0MB)
   OldSize                  = 87031808 (83.0MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 37224448 (35.5MB)
   used     = 14139096 (13.484092712402344MB)
   free     = 23085352 (22.015907287597656MB)
   37.98335975324604% used
From Space:
   capacity = 3145728 (3.0MB)
   used     = 2929584 (2.7938690185546875MB)
   free     = 216144 (0.2061309814453125MB)
   93.12896728515625% used
To Space:
   capacity = 3670016 (3.5MB)
   used     = 0 (0.0MB)
   free     = 3670016 (3.5MB)
   0.0% used
PS Old Generation
   capacity = 165150720 (157.5MB)
   used     = 98856376 (94.27678680419922MB)
   free     = 66294344 (63.22321319580078MB)
   59.8582773359995% used

26452 interned Strings occupying 2659208 bytes.

## 示例2
jmap -F -histo 16464 > 16464.log
-histo[:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. 

## 示例2
jmap -dump:format=b,file=outfile 3024可以将3024进程的内存heap输出出来到outfile文件里，再配合MAT（内存分析工具）。

```
#### jhat JVM Heap Analysis Tool ，把jmap dump的文件展示
```shell script
jhat outfile
http://localhost:7000
```

#### jstack Java堆栈跟踪
```shell
# 示例
jstach 5940
Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.92-b14 mixed mode):
 
"RMI TCP Connection(10)-10.2.13.162" #32 daemon prio=5 os_prio=0 tid=0x00000000179dc000 nid=0x1f60 in Object.wait() [0x000000001d7dd000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at com.sun.jmx.remote.internal.ArrayNotificationBuffer.fetchNotifications(ArrayNotificationBuffer.java:449)
        - locked <0x00000000d462ec18> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)

# 查看该进程中哪个线程占用大量 CPU，执行 top -H -p 11281 
# 输出线程id：2c6d
# 接下来我们将进程中的所有线程输出到一个文件中，执行：jstack  11281> jstack.txt
# 在进程中查找对应的线程 ID，执行：cat jstack.txt | grep -i 2c6d
```

#### JConsole、VisualVM

JVM运行时内存使用情况监控
<https://blog.csdn.net/zmx729618/article/details/78392715>
