---
layout: post
title:  " 数据结构 "
date:   2020-05-31 11:25:00
tags:
- 数据结构与算法
categories:
- 技术
---
#### 数组
- 数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。

#### 链表
- 链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。
- 这表现在对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。
- 一般常见的是有头有尾的单链表，对指针域进行反向链接，还可以形成双向链表或者循环链表。

#### 跳表
- 链表虽然通过增加指针域提升了自由度，但是却导致数据的查询效率恶化。特别是当链表长度很长的时候，对数据的查询还得从头依次查询，这样的效率会更低。跳表的产生就是为了解决链表过长的问题，通过增加链表的多级索引来加快原始链表的查询效率。这样的方式可以让查询的时间复杂度从O(n)提升至O(logn)。
- 跳表通过增加的多级索引能够实现高效的动态插入和删除，其效率和红黑树和平衡二叉树不相上下。目前redis和levelDB都有用到跳表。

#### 栈
- 后进先出

#### 队列
- 先进先出

#### 树
- 别看树好像很高级，其实可看作是链表的高配版。树的实现就是对链表的指针域进行了扩充，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。
- 树遍历
    - 前序遍历：根结点 ---> 左子树 ---> 右子树
    - 中序遍历：左子树---> 根结点 ---> 右子树
    - 后序遍历：左子树 ---> 右子树 ---> 根结点
    - 层次遍历：仅仅需按层次遍历就可以
    
#### 平衡二叉树
- 平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。

#### 红黑树
- 每个结点要么是红的要么是黑的。
- 根结点是黑的。
- 每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。
- 如果一个结点是红的，那么它的两个儿子都是黑的。
- 对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。
- Map、Set、epoll/select中句柄集

#### 堆
- 了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。
- 堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。

#### 散列表 Hash
- 通过某种算法确定唯一（有些算法会出现不同的value算出相同的Hash值）

#### 图
- 多维数据存储,实际应用中是通过图这种模式建立索引与关联关系
- 图数据库？
  - 图数据库(Graph database)并非指存储图片的数据库，而是以图这种数据结构存储和查询数据。
  - 图形数据库是一种在线数据库管理系统，具有处理图形数据模型的创建，读取，更新和删除（CRUD）操作。
  - 与其他数据库不同，关系在图数据库中占首要地位。这意味着应用程序不必使用外键或带外处理（如MapReduce）来推断数据连接。
  - 与关系数据库或其他NoSQL数据库相比，图数据库的数据模型也更加简单，更具表现力。
  - 图形数据库是为与事务（OLTP）系统一起使用而构建的，并且在设计时考虑了事务完整性和操作可用性。

<https://mp.weixin.qq.com/s/TFG7bWo1BFzjusQ2fEvVSA>