---
layout: post
title:  " Dubbo "
date:   2020-05-01 11:25:00
tags:
- 微服务
- 分布式
categories:
- 技术
---
### Dubbo
- 官网 <http://dubbo.apache.org/>
- start <http://start.dubbo.io/>
- Dubbo实践 <https://www.cnblogs.com/warehouse/tag/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/>
- 通俗易懂的 Dubbo 教程 <https://blog.csdn.net/Geffin/category_9931110.html>
- Java RMI & Dubbo <http://dubbo.apache.org/zh-cn/blog/dubbo-101.html>

#### Dubbo是什么？
- dubbo是一个分布式框架，远程服务调用的分布式框架，其核心部分包含:
    - 自动发现:基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。
    - 远程通讯:提供对多种基于⻓连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。
    - 集群容错:提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。

#### Dubbo组成
- provider:暴露服务的服务提供方 
- consumer:调用远程服务的服务消费方 
- registry:服务注册于发现的注册中心 
- monitor:统计服务调用次数和调用时间的监控中心 
- container:服务运行容器

#### Dubbo架构4大层10小层
<img src="/img/dubbo1.jpg" width="600px" />
1. 服务接口层（Service）
1. 配置代理层（配置层、服务代理层、服务注册层）
1. 路由监控（集群层、监控层）
1. 传输层 （协议层由invoker转变为exporter、信息交换 异步/同步转、网络传输、序列化）
<img src="/img/dubbo2.jpg" width="600px" />

1. 服务接口层（Service）：该层是与实际业务逻辑相关的，根据服务提供方和服务消费方的业务设计对应的接口和实现。
1. 配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为中心，可以直接new配置类，也可以通过spring解析配置生成配置类。
1. 服务代理层（Proxy）：服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。
1. 服务注册层（Registry）：封装服务地址的注册与发现，以服务URL为中心，扩展接口为RegistryFactory、Registry和RegistryService。可能没有服务注册中心，此时服务提供方直接暴露服务。
1. 集群层（Cluster）：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster、Directory、Router和LoadBalance。将多个服务提供方组合为一个服务提供方，实现对服务消费方来透明，只需要与一个服务提供方进行交互。
1. 监控层（Monitor）：RPC调用次数和调用时间监控，以Statistics为中心，扩展接口为MonitorFactory、Monitor和MonitorService。
1. 远程调用层（Protocol）：封将RPC调用，以Invocation和Result为中心，扩展接口为Protocol、Invoker和Exporter。Protocol是服务域，它是Invoker暴露和引用的主功能入口，它负责Invoker的生命周期管理。Invoker是实体域，它是Dubbo的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起invoke调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。
1. 信息交换层（Exchange）：封装请求响应模式，同步转异步，以Request和Response为中心，扩展接口为Exchanger、ExchangeChannel、ExchangeClient和ExchangeServer。
1. 网络传输层（Transport）：抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel、Transporter、Client、Server和Codec。
1. 数据序列化层（Serialize）：可复用的一些工具，扩展接口为Serialization、 ObjectInput、ObjectOutput和ThreadPool。

<img src="/img/dubbo3.jpg" width="600px" />

#### Dubbo Exporter是真正的发布
- Invoker经过协议层变成真正的服务暴露exporter
<img src="/img/exporter.jpg" width="600px" />

```shell
Exporter<?> exporter = protocol.export(wrapperInvoker)
```
- Dubbo 会在 Spring 实例化完 bean 之后，在刷新容器最后一步发布 ContextRefreshEvent 事件的时候，
通知实现了 ApplicationListener 的 ServiceBean 类进行回调 onApplicationEvent 事件方法，
Dubbo 会在这个方法中调用 ServiceBean 父类 ServiceConfig 的 export 方法，而该方法真正实现了服务的(异步或者非异步)发 布。

#### Dubbo2.7新特性
- 异步化改造
    - 请求调用方式
        - oneway 指的是客户端发送消息后，不需要接受响应。对于那些不关心服务端响应的请求，比较适合使用 oneway 通信。
        - sync 是最常用的通信方式，也是默认的通信方法。
        - 异步 future 在接收响应时，future.get() 会导致线程的阻塞;
        - 异步 callback 通常会设置一个回调线程，当接收到响应时，自动执行，不会对当前线程造成阻塞。
      
      ```shell
        AsyncService.sayHello("Han Meimei");
        Future<String> fooFuture = RpcContext.getContext().getFuture();
        fooFuture.get();
        # 2.7 前后
        CompletableFuture<String> future = asyncService.sayHiAsync("Han MeiMei");
        future.whenComplete((retValue, exception) -> {
            if (exception == null) {
                System.out.println(retValue);
            } else {
                exception.printStackTrace();
            }
        });
        # Dubbo 2.7 中使用了 JDK1.8 提供的 CompletableFuture 原生接口对自身的异步化做了改进。
      ```
- 三大中心改造 
    - 注册中心 
        - 简化到只做服务注册
    - 元数据中心 
        - 生产者端注册 30+ 参数，有接近一半是不需要作为注册中心进行传递；消费者端注册 25+ 参数，只有个别需要传递给注册中心。有了以上的理论分析，Dubbo 2.7 进行了大刀阔斧的改动，只将真正属于服务治理的数据发布到注册中心之中，大大降低了注册中心的负荷。
          同时，将全量的元数据发布到另外的组件中：元数据中心。元数据中心目前支持 redis（推荐），zookeeper。
    - 配置中心
        - 衡量配置中心的必要性往往从三个角度出发：
            - 分布式配置统一管理
            - 动态变更推送
            - 安全性
        - Spring Cloud Config, Apollo, Nacos 等分布式配置中心组件都对上述功能有不同程度的支持。在 2.7 之前的版本中，在 zookeeper 中设置了部分节点：configurators，routers，用于管理部分配置和路由信息，它们可以理解为 Dubbo 配置中心的雏形。在 2.7 中，Dubbo 正式支持了配置中心，目前支持的几种注册中心 Zookeeper，Apollo，Nacos（2.7.1-release 支持）。
        - 在 Dubbo 中，配置中心主要承担了两个作用
            - 外部化配置。启动配置的集中式存储
            - 服务治理。服务治理规则的存储与通知
- 服务治理增强，我更倾向于将 Dubbo 当做一个服务治理框架，而不仅仅是一个 RPC 框架。在 2.7 中，Dubbo 对其服务治理能力进行了增强，增加了标签路由的能力，并抽象出了应用路由和服务路由的概念。
- <http://dubbo.apache.org/zh-cn/blog/dubbo-27-features.html>

#### Dubbo 哪些坑
- 超时重试
- 子类继承父类的属性，反序列化丢失
- 首先需要说明的是，出现这个问题有一定的条件。如果Provider中的api和自定义Exception定义都是在一个api.jar中，那么是不会有任何问题的。但是如果自定义Exception是在一个单独的比如common.jar包中就会出现这个问题（此时api和model在另一个api.jar中）。
- <https://www.jianshu.com/p/1a281eb505df?tdsourcetag=s_pctim_aiomsg>
- <https://www.cnblogs.com/coding-night/articles/10656806.html>
- <https://blog.csdn.net/u013256816/article/details/102674846>

#### Dubbo 哪些漏洞？
- Apache Dubbo存在反序列化漏洞，当网站安装了Apache Dubbo并且启用http协议进行通信时，
    攻击者可以向网站发送POST请求，在请求里可以执行一个反序列化的操作，由于没有任何安全校验，这个反序列化过程可以执行任意代码。 
    <https://baijiahao.baidu.com/s?id=1658423152369425625&wfr=spider&for=pc>

#### 降级容错熔断方式
- Dubbo服务之RPC扩展和本地Mock <https://www.cnblogs.com/hyry/p/12067497.html>
- Dubbo Mock原理分析 <https://mp.weixin.qq.com/s/T-4xS2LruSaBRxR8LhcrjQ>
- Dubbo与断路器 Hystrix 的集成 <https://blog.csdn.net/Geffin/article/details/105808745>
- 限流降级神器-哨兵(sentinel)原理分析 <https://mp.weixin.qq.com/s/g2hyp9CquEAvTe8QmPO-3g>
- Sentinel-与-Hystrix-的对比 <https://github.com/alibaba/Sentinel/wiki/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94>
- Sentinel 为 Dubbo服务保驾护航 <http://dubbo.apache.org/zh-cn/blog/sentinel-introduction-for-dubbo.html>
- Hystrix两种隔离模式分析 <https://www.jianshu.com/p/e1a4d3bdf7c4>

#### 通过QoS对服务进行动态控制
在Dubbo中，QoS Quality of Service 这个概念被用于动态的对服务进行查询和控制。
例如对获取当前提供和消费的所有服务，以及对服务进行动态的上下线，即从注册中心上进行注册和反注册操作。
<http://dubbo.apache.org/zh-cn/blog/introduction-to-dubbo-qos.html>

#### 当一个服务接口有多种实现时怎么做?
当一个接口有多种实现时，可以用 group 属性来分组，服务提供方和消费方都指定同一个 group 即可
```xml
<dubbo:reference interface="com.xxx.MenuService" group="*" merger="true">
    <dubbo:method name="getMenuItems" merger="false" />
</dubbo:reference>
```

#### 服务上线怎么兼容旧版本?
可以用版本号(version)过渡，多个不同版本的服务注册到注册中心，版本号不同的服务 相互间不引用。这个和服务分组的概念有一点类似。
```xml
<dubbo:service interface="com.foo.BarService" version="1.0.0" />
<dubbo:service interface="com.foo.BarService" version="2.0.0" />

<dubbo:reference id="barService" interface="com.foo.BarService" version="1.0.0" />
<dubbo:reference id="barService" interface="com.foo.BarService" version="2.0.0" />
<dubbo:reference id="barService" interface="com.foo.BarService" version="*" />
```
<https://blog.csdn.net/taojin12/article/details/106869343>

#### Dubbo 的管理控制台能做什么?
管理控制台主要包含:路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡， 等管理功能。

#### Dubbo 内置了四种负载均衡策略，分别如下：
- RandomLoadBalance：随机负载均衡，随机负载均衡是 Dubbo 默认的负载均衡策略，顾名思义，就是从多个服务提供者中随机选择一个。
    需要注意的是，Dubbo 的随机负载均衡并非是完全的随机，它有一个权重的概念，会按照权重来设置随机概率，举个例子，我们现在有两个服务提供者，一个的权重是100，另一个的权重是300，那么前者被分配的概率就为 25%，后者被分配的概率为 75%。
    我们可以对服务提供者设置不同的权重，例如对性能较好的机器设置大权重，对差一点的机器设置小一点的权重。
- RoundRobinLoadBalance：轮询负载均衡，即会轮询每一个服务提供者，依次对其进行调用。
    轮询负载均衡也有权重的概念，可以严格按照我们设置的比例进行分配，这个是该算法的优点，不过，该算法的缺点也很明显，可能会存在较慢的机器，那么请求会在这台机器上进行累积，很容易导致整个系统变慢。

```java
@Component
public class ChangeServiceImpl implements ChangeService {

    @Reference(loadbalance = "roundrobin")
    NameService nameService;

    @Override
    public String change(String name) {
        return nameService.updateName(name);
    }
}
```
- LeastActiveLoadBalance：最少活跃调用数负载均衡，最少活跃调用数负载均衡会将请求转发至活跃调用数最少的机器上，如果有两台机器活跃数相同，会采取随机负载均衡的策略。
    什么是活跃调用数呢？每个服务维护一个活跃数计数器，该计数器存放机器未处理完的请求。当有请求产生时，会选择活跃数最小的机器去执行。
    最少活跃调用数负载均衡可以令慢的机器收到更少的请求。
- ConsistentHashLoadBalance：一致性哈希负载均衡，要了解这种负载均衡策略，我们首先得学习一下一致性哈希算法。不会一致性哈希算法的同学可以看一下我之前写的这篇博客，质量保证过硬：一致性哈希算法详解
                                      一致性哈希可以保证相同参数的请求一定会发送到同一台机器上，即使有机器崩溃，由于一致性哈希算法的特性与虚拟节点的存在，发往该机器的请求会被发送到其它机器上，并不会引发剧烈变动。

```xml
缺省只对第一个参数Hash，如果要修改，请配置
<dubbo:parameter key="hash.arguments" value="0,1" />
 
缺省用160份虚拟节点，如果要修改，请配置
<dubbo:parameter key="hash.nodes" value="320" />
```

- <http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html>


#### Dubbo集群容错
Dubbo默认内置了一些容错策略，如果还不能满足用户需求，我们可以自定义容错策略进行配置。Dubbo 内置了以下几种容错策略：
- Failover(失败自动切换)，Failover 是 Dubbo 默认的容错策略。
                   其实，Failover 是高可用的一个常用概念，服务器通常拥有主备两套机器配置，当主服务器出现故障时，会自动切换到备服务器中，从而保证了整体的高可用性。
                   当调用失败时，会根据配置的重试次数，自动从其他可用地址中重新选择一个可用的地址进行调用，直到调用成功，或者是达到重试的上限位置。
                   Failover 会自动对失败进行重试，但它也带来了一些副作用。首先，重试会增加开销，再者，重试会增加调用的响应时间，最后，在某些情况下，重试会造成资源的浪费。
- Failsafe(失败安全)，Failsafe 在调用失败时，会忽略此错误，并记录一条日志，同时返回一个空结果，在上游看来调用是成功的。
                 Failsafe 即使失败了也不会影响整个调用流程，它的失败不影响核心业务的正确性，通常用于旁路系统或流程中，一般用于写入审计日志等操作。
- Failfast(快速失败)，有一些业务场景中，其操作是非幂等的，不能重复调用。这种情况下，重试并不是一个好办法，需要用到 Failfast，调用失败立即报错，让调用方来决定下一步的操作并保证业务的幂等性。
- Failback(失败自动恢复)，在 Failback 中，如果调用失败，则此次失败相当于 Failsafe，将返回一个空结果，但与 Failsafe 不同的是，Failback 策略会将这次调用加入内存中的失败列表中，对于这个列表中的失败调用，会在另一个线程中进行异步重试，重试如果再发生失败，则会忽略，即使重试调用成功，原来的调用方也感知不到了。因此它通常适合于对于实时性要求不高，且不需要返回值的一些异步操作。
- Forking(并行调用)，Forking 在第一次调用就同时发起多个调用，只要其中一个调用成功，就认为成功。在资源充足，且对于失败的容忍度较低的场景下，可以采用此策略。
- Broadcast(广播调用)，在某些场景下，我们可能需要对所有服务提供者进行操作，我们可以采用广播调用策略，会逐个调用所有提供者，只要任意有一个提供者出错，则认为此次调用出错。通常用于通知所有提供者更新缓存或日志等本地资源信息。


#### Dubbo异步转同步
1. 调用方请求远程服务之后，需要等待结果，此刻，请求线程应该阻塞
2. 远程服务返回结果后，唤醒请求线程，调用方得到结果

```java
public Object get(int timeout) throws RemotingException {
        if (timeout <= 0) {
            timeout = Constants.DEFAULT_TIMEOUT;
        }
        // isDone()方法就是判断Response是否有值(即是否有返回结果)
        if (!isDone()) {
            long start = System.currentTimeMillis();
            lock.lock();
            try {
                while (!isDone()) {
                    // 超时等待
                    done.await(timeout, TimeUnit.MILLISECONDS);
                    // 如果有返回结果了，或者，超时了，就退出循环
                    if (isDone() || System.currentTimeMillis() - start > timeout) {
                        break;
                    }
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } finally {
                lock.unlock();
            }
            // 如果是超时了，就抛出异常
            if (!isDone()) {
                throw new TimeoutException(sent > 0, channel, getTimeoutMessage(false));
            }
        }
        // 远程服务正常返回结果，则返回给调用方
        return returnFromResponse();
}
private void doReceived(Response res) {
        lock.lock();
        try {
            response = res;
            if (done != null) {
                // 唤醒阻塞的线程
                done.signal();
            }
        } finally {
            lock.unlock();
        }
        if (callback != null) {
            invokeCallback(callback);
        }
    }
```
#### dubbo之令牌验证
- 防止消费者绕过注册中心访问提供者
- 在注册中心控制权限，以决定要不要下发令牌给消费者
- 注册中心可灵活改变授权方式，而不需修改或升级提供者

```xml
<!--可以全局设置开启令牌验证-->

<!--随机token令牌，使用UUID生成-->
<dubbo:provider token="true" />
<!--固定token令牌，相当于密码-->
<dubbo:provider  token="123456" />
<!--也可在服务级别设置：-->

<!--随机token令牌，使用UUID生成-->
<dubbo:service interface="com.foo.BarService" token="true" />
<!--固定token令牌，相当于密码-->
<dubbo:service interface="com.foo.BarService" token="123456" />
<!--还可在协议级别设置：-->

<!--随机token令牌，使用UUID生成-->
<dubbo:protocol name="dubbo" token="true" />
<!--固定token令牌，相当于密码-->
<dubbo:protocol name="dubbo" token="123456" />
```

#### 负载均衡 集群容错 服务路由
- 这3个概念容易混淆。他们都描述了怎么从多个 Provider 中选择一个来进行调用。那他们到底有什么区别呢?下面我来举一个简单的例子，把这几个概念阐述清楚吧。
- 有一个Dubbo的用户服务，在北京部署了10个，在上海部署了20个。一个杭州的服务消费方发起了一次调用，然后发生了以下的事情:
- 根据配置的路由规则，如果杭州发起的调用，会路由到比较近的上海的20个 Provider。
- 根据配置的随机负载均衡策略，在20个 Provider 中随机选择了一个来调用，假设随机到了第7个 Provider。
- 结果调用第7个 Provider 失败了。
- 根据配置的Failover集群容错模式，重试其他服务器。
- 重试了第13个 Provider，调用成功。
- 上面的第1，2，4步骤就分别对应了路由，负载均衡和集群容错。 Dubbo中，先通过路由，从多个 Provider 中按照路由规则，选出一个子集。再根据负载均衡从子集中选出一个 Provider 进行本次调用。如果调用失败了，根据集群容错策略，进行重试或定时重发或快速失败等。 可以看到Dubbo中的路由，负载均衡和集群容错发生在一次RPC调用的不同阶段。最先是路由，然后是负载均衡
