---
layout: post
title:  "HTTP-HTTPS"
date:   2020-06-29 16:42:00 +0900
comments: true
tags:
- 网络
categories:
- 技术
---
#### HTTP HTTPS 
- 理解HTTPS <http://www.52im.net/thread-1890-1-1.html>

#### SSL/TLS 
- 过程概述，4次握手，主要是为了生成"对话秘钥"
    1. 客户端携带随机数1、TLS版本号、加密方式如RSA、压缩方式等，发送给服务器
    2. 服务器携带随机数2、确认的TLS版本号、加密方式如RSA、压缩方式、服务器正式（含公钥）等，发送给客户端
    3. 客户端生成随机数3并用公钥加密发送给服务器，并通知服务器编码方式改变，握手结束
    4. 服务器收到随机数3，通知客户端编码方式改变，握手结束
    3. 双方采用"对话密钥"进行加密通信。
- 要点
    - 通信阶段的会话密码，是由3个随机数生成：客户端产生2个、服务端产生1个
- 参考
    - SSL/TLS协议运行机制的概述 <http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html>
    - 图解SSL/TLS协议 <http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html>
    - <http://www.52im.net/forum.php?mod=viewthread&tid=327&highlight=SSL%2FTLS>

#### 公钥、私钥有何特点？
公钥加密的，私钥可以解密；
私钥加密的，公钥可以解密。

但公钥加密的，公钥无法解密；
私钥加密的，私钥也无法解密！
 
#### Linux版本
- 0.00  1991.2-4 两个进程分别显示AAA BBB
- 0.01  1991.9 第一个正式向外公布的Linux内核版本
- 0.02  1991.10.5 Linus Torvalds将当时最初的0.02内核版本发布到了Minix新闻组，很快就得到了反应。Linus Torvalds在这种简单的任务切换机制上进行扩展，并在很多热心支持者的帮助下开发和推出了Linux的第一个稳定的工作版本。
- 0.03  1991.10.5
- 0.10  1991.10 Linux0.10版本内核发布，0.11版本随后在1991年12月推出，当时它被发布在Internet上，供人们免费使用。
- 0.11  1991.12.8 基本可以正常运行的内核版本
- 0.12  1992.1.15 主要加入对数学协处理器的软件模拟程序
- 0.95（0.13） 1992.3.8 开始加入虚拟文件系统思想的内核版本
- 0.96  1992.5.12 开始加入网络支持和虚拟文件系统
- 0.97  1992.8.1
- 0.98  1992.9.29
- 0.99  1992.12.13
- 1.0   1994.3.14 Linux1.0版本内核发布，使用它的用户越来越多，而且Linux系统的核心开发队伍也建起来了。
- 1.2   1995.3.7
- 2.0   1996.2.9
- 2.2   1999.1.26
- 2.4   2001.1.4 Linux2.4.0版本内核发布。
- 2.6.x 2003-12 2011-05
- 3.x   2011-06 2015-02
- 4.x   2015-04 2018-12
- 5.x   2019-03
 
#### HTTP版本差异
- HTTP/0.9 (1991)
    - 只支持GET、无协议头、无图片的HTML
    - 连接用完立即关闭、无错误码
- HTTP/1.0 (1992-1996)
    - 请求与响应支持头域
    - 响应对象以一个响应状态行开始
    - 响应对象不只限于超文本
    - 开始支持客户端通过POST方法向Web服务器提交数据，支持GET、HEAD、POST方法
    - 支持长连接（但默认还是使用短连接），缓存机制，以及身份认证 
- HTTP/1.1 (1997-1999)
    - keepalive连接
    - chunked编码传输 
    - 字节范围请求，断点续传
    - 请求流水线，同时交叉请求
    - 请求消息和响应消息都应支持Host头域
    - 增加了OPTIONS,PUT, DELETE, TRACE, CONNECT方法
    - HTTP/1.1在1.0的基础上加入了一些cache的新特性，引入了实体标签，一般被称为e-tags，新增更为强大的Cache-Control头。 
- HTTP/2.0 (2012-2014)
    - 多路复用（二进制分帧）
    - 头部压缩
    - 随时复位
    - Server PUSH
    - 优先权依赖
- SPDY 协议
    - 2009年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。
      这个协议在Chrome浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。
- 参考 <http://www.52im.net/thread-1709-1-1.html>

#### SSL/TLS历史
- 1994年，NetScape公司设计了SSL协议（Secure Sockets Layer）的1.0版，但是未发布。
- 1995年，NetScape公司发布SSL 2.0版，很快发现有严重漏洞。
- 1996年，SSL 3.0版问世，得到大规模应用。
- 1999年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。
- 2006年和2008年，TLS进行了两次升级，分别为TLS 1.1版和TLS 1.2版。最新的变动是2011年TLS 1.2的修订版。
- 目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。
  TLS 1.0通常被标示为SSL 3.1，TLS 1.1为SSL 3.2，TLS 1.2为SSL 3.3。

#### SSL/TLS简介
- SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。
- TLS：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。
- SSL是Netscape开发的专门用户保护Web通讯的，目前版本为3.0。最新版本的TLS 1.0是IETF(工程任务组)制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。两者差别极小，可以理解为SSL 3.1，它是写入了RFC的。 
- <https://kb.cnblogs.com/page/197396/>

#### MITM攻击
- SSLStrip （降级攻击），把Https，降到Http。这种攻击利用的是很多网站并没有关掉http访问，而是在服务端将首页从http跳到https，
    给了攻击者一个http响应做突破口。不过这种攻击也可以防御，启用HSTS(HTTP Strict Transport Security, HTTP 严格传输安全)和Preload list就行了，让攻击者找不到任何http的机会。
- SSLSplit（解密攻击），有些版本的SDK并未进行证书校验，修复并给出提示；内置证书；远离非法wifi。
- 理解清楚中间人攻击（Man-in-the-MiddleAttack，简称“MITM攻击”）也就理解了HTTPS。
- 中间人攻击（MITM攻击）是指，黑客拦截并篡改网络中的通信数据。又分为被动MITM和主动MITM，被动MITM只窃取通信数据而不修改，而主动MITM不但能窃取数据，还会篡改通信数据。最常见的中间人攻击常常发生在公共wifi或者公共路由上。

#### HTTPS加密原理
1. 各个操作系统或浏览器提前内置或缓存了合法CA机构的公钥
1. 服务器提交相关信息给CA机构
1. CA机构生成该服务器对应的私钥+证书（包含服务器公钥、数字签名等）
1. 客户端发起请求到服务器，服务器返回CA机构生成的证书
1. 客户端用提前内置的CA机构的公钥解密该证书，并验证该证书是否合法
1. 验证证书合法后，从证书中提取服务器的公钥，开始SSL/TLS交互
1. 其他方便理解的总结
    - 引入CA之后，重点是有2个公钥：自己服务器的公钥、CA机构的公钥
    - 当客户端收到证书之后，使用本地配置的权威机构的公钥对证书进行解密得到服务端的公钥和证书的数字签名，数字签名经过CA公钥解密得到证书信息摘要。
    - 然后用证书签名的方法计算一下当前证书的信息摘要，与收到的信息摘要作对比，如果一样，表示证书一定是服务器下发的，没有被中间人篡改过。因为中间人虽然有权威机构的公钥，能够解析证书内容并篡改，但是篡改完成之后中间人需要将证书重新加密，但是中间人没有权威机构的私钥，无法加密，强行加密只会导致客户端无法解密，如果中间人强行乱修改证书，就会导致证书内容和证书签名不匹配。
    - 客户端验证证书的合法性，包括：
        - 证书是否过期
        - 发行服务器证书的CA是否可靠
        - 本地CA公钥是否能正确解开证书
        - 服务器证书上的域名是否和服务器的实际域名相匹配
    
#### 第三方攻击者能否让自己的证书显示出来的信息也是服务端呢？
-（伪装服务端一样的配置）显然这个是不行的，因为当第三方攻击者去CA那边寻求认证的时候CA会要求其提供例如域名的whois信息、域名管理邮箱等证明你是服务端域名的拥有者，而第三方攻击者是无法提供这些信息所以他就是无法骗CA他拥有属于服务端的域名

#### iOS 面试题·什么是中间人攻击？如何避免？
- 客户端不要轻易信任证书
- App可以提前预埋证书在本地
- <https://www.jianshu.com/p/210c296eb836>

#### 参考
- 理解HTTPS <http://www.52im.net/forum.php?mod=viewthread&tid=1890&highlight=https>