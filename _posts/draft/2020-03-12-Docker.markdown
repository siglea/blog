---
layout: post
title:  "Docker"
date:   2020-03-12 23:25:00 +0900
comments: true
tags:
- Docker
categories:
- 互联网
---
#### Docker原理 ☆☆☆

#### Docker Hello World!
```shell
docker run hello-world
docker run ubuntu:15.10 /bin/echo "Hello world"
```
#### Docker pull Image
```shell 
docker pull library/hello-world
```
#### docker run nginx
```shell
docker run --name my_nginx_v1 -p 8080:80 -d nginx:v1
## --name nginx-test：容器名称。
## -p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。
## -d nginx： 设置容器在在后台一直运行。
```
<https://www.runoob.com/docker/docker-install-nginx.html>

#### docker run springboot
```shell
docker run -p 8080:8080 -t springboot/spring-boot-docker
```
<http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html>
#### 查看运行的容器
```shell
docker ps
docker ps -a
# 输出详情介绍：
## CONTAINER ID: 容器 ID。
## IMAGE: 使用的镜像。
## COMMAND: 启动容器时运行的命令。
## CREATED: 容器的创建时间。

## STATUS: 容器状态。
## 状态有7种：
### created（已创建）
### restarting（重启中）
### running（运行中）
### removing（迁移中）
### paused（暂停）
### exited（停止）
### dead（死亡）

## PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。
## NAMES: 自动分配的容器名称。
```
#### 查看容器内的标准输出日志
```shell
docker logs 2b1b7a428627
```
#### 启动/重启/停止容器
```shell
docker start/restart amazing_cori
docker stop 2b1b7a428627
```
#### 删除容器/镜像
```shell
docker rm 20ca2a70ee13
docker rmi ec49dbd13cf5
```
#### Compose Machine Swarm
```shell

```
#### Kubernetes
#### docker中run和start的区别
- docker run 后面指定的是一个镜像
- 而docker start指定的是一个容器
- docker run是利用镜像生成容器，并启动容器，而docker start是启动一个之前生成过的容器

#### Dockerfile 命令详解
<http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html>

<http://www.ityouknow.com/docker.html>



