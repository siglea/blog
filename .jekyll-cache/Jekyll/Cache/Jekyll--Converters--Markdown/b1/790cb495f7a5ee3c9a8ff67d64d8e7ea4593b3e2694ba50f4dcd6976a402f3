I"g<h3 id="current-object-and-current-class">current object and current class</h3>

<p>Everything is an object in Ruby, there is an current object and current class referred to in every line of code. We use <code class="highlighter-rouge">self</code> to refer to current object (there is no keyword for current class).</p>

<p>When call a method on an object, <code class="highlighter-rouge">self</code>(current object) is the receiver of the method. In a class definition, <code class="highlighter-rouge">self</code>(current object) is the class itself.</p>

<p>Though there is no keyword for current class, it’s easy to refer to as long as we know what is our current object.</p>

<h3 id="class_eval">class_eval</h3>

<p><code class="highlighter-rouge">Module#class_eval</code> is used for modifying current class. It’s commonly used when we don’t know the exact name of class we want to refer to. For example,</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_method_to</span><span class="p">(</span><span class="n">my_class</span><span class="p">)</span>
  <span class="n">my_class</span><span class="p">.</span><span class="nf">class_eval</span> <span class="k">do</span>
    <span class="k">def</span> <span class="nf">foo</span>
      <span class="nb">puts</span> <span class="s1">'foo'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
			
<span class="n">add_method_to</span><span class="p">(</span><span class="no">String</span><span class="p">)</span>
<span class="s2">"bar"</span><span class="p">.</span><span class="nf">foo</span>
<span class="c1">#=&gt; "foo"</span>
</code></pre></div></div>

<p>One example in Rails is putting common code for several models (just like what model conern does). For example, I want to add common validations for my models, I can create a module and use <code class="highlighter-rouge">class_eval</code> to add methods in classes that include it. In order to get that class, we need a hook method <code class="highlighter-rouge">self.included</code>, and put <code class="highlighter-rouge">class_eval</code> part inside this method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">SomeCommonModule</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">base</span><span class="p">.</span><span class="nf">class_eval</span> <span class="k">do</span>
      <span class="n">validates_presence_of</span> <span class="ss">:balabalabala</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="instance_eval">instance_eval</h3>

<p><code class="highlighter-rouge">instance_eval</code> is used for modifying current object (self), it breaks encapsulation, be careful with it.</p>

<p>An example is to change instance variable of an object:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Foo</span>
  <span class="k">def</span> <span class="nf">bar</span>
    <span class="vi">@bar</span> <span class="o">=</span> <span class="s2">"bar"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="p">.</span><span class="nf">new</span>
<span class="n">foo</span><span class="p">.</span><span class="nf">bar</span>
<span class="nb">puts</span> <span class="n">foo</span><span class="p">.</span><span class="nf">instance_eval</span> <span class="p">{</span> <span class="vi">@bar</span> <span class="p">}</span>
 <span class="c1">#=&gt; "bar"</span>
<span class="n">foo</span><span class="p">.</span><span class="nf">instance_eval</span> <span class="p">{</span> <span class="vi">@bar</span> <span class="o">=</span> <span class="s2">"bbbbar"</span> <span class="p">}</span>
<span class="nb">puts</span> <span class="n">foo</span><span class="p">.</span><span class="nf">instance_eval</span> <span class="p">{</span> <span class="vi">@bar</span> <span class="p">}</span>
 <span class="c1">#=&gt; "bbbbar"</span>
</code></pre></div></div>

:ET