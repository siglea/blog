I"¦<h1 id="background">Background</h1>

<p>Recently Iâ€™m working on upgrading a Rails 2.3 application to Rails 4.2 (Yes, itâ€™s true, our company is still using 2.3 now, ( â€˜Î˜â€™)ï¾‰( â€˜Î˜â€™)ï¾‰( â€˜Î˜â€™)ï¾‰). There are 5 models containing codes which are 90% the same. I tried to refactor them with Rails 4â€™s concern module.</p>
<hr />

<h1 id="what-is-concern">What is concern</h1>

<h3 id="rails-23-way">Rails 2.3 way</h3>
<p>In Rails 2.3, if you extract code from model to a module, you need to create a module and put it into your <code class="highlighter-rouge">/lib</code> directory. To realize validations and class methods, you need to add a hook method in it, which was not an elegant way.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Taggable</span>
  <span class="k">def</span>  <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">base</span><span class="p">.</span><span class="nf">extend</span> <span class="no">ClassMethods</span>
    <span class="n">base</span><span class="p">.</span><span class="nf">class_eval</span> <span class="k">do</span>
      <span class="n">scope</span> <span class="ss">:disabled</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">disabled: </span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
      <span class="c1"># scope, validations, after_save .....</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">module</span> <span class="nn">ClassMethods</span>
    <span class="k">def</span> <span class="nf">find_with_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
	 <span class="c1"># .....</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="realization-with-concern">Realization with concern</h3>
<p>In Rails 4, you can eaily realize it by creating a module extending <code class="highlighter-rouge">ActiveSupport::Concern</code> and include this module in your model.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Taggable</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
  <span class="n">included</span> <span class="k">do</span>
    <span class="n">scope</span> <span class="ss">:disabled</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">disabled: </span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
  
  <span class="n">class_methods</span> <span class="k">do</span>
    <span class="k">def</span> <span class="nf">find_with_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
	 <span class="c1"># ...</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="c1">#put instance methods here</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="notice">Notice</h3>
<ul>
  <li>If you want to know which class is using this module in a class method, you can simply call <code class="highlighter-rouge">self</code>. For example, I want to cache class method <code class="highlighter-rouge">find</code>, then in my taggble module, I use</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">class_methods</span> <span class="k">do</span>
  <span class="k">def</span> <span class="nf">some_class_method</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="no">Rails</span><span class="p">.</span><span class="nf">cache</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">.find(</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">)"</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">15</span><span class="p">.</span><span class="nf">minutes</span><span class="p">.</span><span class="nf">to_i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<ul>
  <li>If itâ€™s in an instance method, use <code class="highlighter-rouge">self.class</code> instead</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">some_instance_method</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
  <span class="no">Rails</span><span class="p">.</span><span class="nf">cache</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2">.find(</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">)"</span><span class="p">,</span> <span class="ss">:expires_in</span> <span class="o">=&gt;</span> <span class="mi">15</span><span class="p">.</span><span class="nf">minutes</span><span class="p">.</span><span class="nf">to_i</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And the code is more elegant (^m^ )ã‚¯ã‚¹ãƒƒ.</p>
:ET