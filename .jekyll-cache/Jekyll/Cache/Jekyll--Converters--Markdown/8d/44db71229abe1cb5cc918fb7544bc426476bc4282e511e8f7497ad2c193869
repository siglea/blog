I"L*<h4 id="基础入门">基础入门</h4>
<ul>
  <li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></li>
  <li><a href="https://www.jianshu.com/p/d68197bc7def">https://www.jianshu.com/p/d68197bc7def</a></li>
  <li><a href="https://www.elastic.co/cn/products/elasticsearch">ec官网</a></li>
</ul>

<h4 id="常用命令">常用命令</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#查看节点左右的Index</span>
curl <span class="nt">-X</span> GET <span class="s1">'http://localhost:9200/_cat/indices?v'</span>

<span class="c">#查看所有Type</span>
curl <span class="s1">'localhost:9200/_mapping?pretty=true'</span>

<span class="c">#新建Index</span>
curl <span class="nt">-X</span> PUT <span class="s1">'localhost:9200/weather'</span>

<span class="c">#删除Index</span>
curl <span class="nt">-X</span> DELETE <span class="s1">'localhost:9200/weather'</span>

<span class="c">#新建Index附件结构 Index:accounts Type:person</span>
curl <span class="nt">-X</span> PUT <span class="s1">'localhost:9200/accounts'</span> <span class="nt">-d</span> <span class="s1">'
{
  "mappings": {
    "person": {
      "properties": {
        "user": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        },
        "title": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        },
        "desc": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        }
      }
    }
  }
}'</span>

<span class="c">#给指定Index指定的type增加Document</span>
<span class="nv">$ </span>curl <span class="nt">-X</span> PUT <span class="s1">'localhost:9200/accounts/person/1'</span> <span class="nt">-d</span> <span class="s1">'
{
  "user": "张三",
  "title": "工程师",
  "desc": "数据库管理"
}'</span>

<span class="c">#查看指定Index指定的type的指定Document</span>
curl <span class="s1">'localhost:9200/accounts/person/1?pretty=true'</span>

<span class="c">#查看指定Index指定的type的所有记录</span>
<span class="nv">$ </span>curl <span class="s1">'localhost:9200/accounts/person/_search'</span>

<span class="c">#搜索指定Index指定的type的复合搜索条件的记录 from:偏移量 size:数据量</span>
<span class="c">#该分页方式是假分页，会读取整体数据只显示size，数据量超过1万性能急剧下降</span>
curl <span class="s1">'localhost:9200/accounts/person/_search'</span>  <span class="nt">-d</span> <span class="s1">'
{
  "query" : { "match" : { "desc" : "管理" }},
  "from": 1,
  "size": 1
}'</span>

<span class="c">#逻辑搜索 OR 关系</span>
curl <span class="s1">'localhost:9200/accounts/person/_search'</span>  <span class="nt">-d</span> <span class="s1">'
{
  "query" : { "match" : { "desc" : "软件 系统" }}
}'</span>

<span class="c">#逻辑搜索 AND 关系</span>
curl <span class="s1">'localhost:9200/accounts/person/_search'</span>  <span class="nt">-d</span> <span class="s1">'
{
  "query": {
    "bool": {
      "must": [
        { "match": { "desc": "软件" } },
        { "match": { "desc": "系统" } }
      ]
    }
  }
}'</span>

<span class="c">#scroll分页查询</span>
<span class="c">#区别于from size的方式的本质是采用类似Oracle的游标</span>
curl <span class="nt">-XGET</span> <span class="s1">'localhost:9200/twitter/tweet/_search?scroll=1m'</span> <span class="nt">-d</span> <span class="s1">'
{
    "query": {
        "match" : {
            "title" : "elasticsearch"
        }
    }
}
'</span>

curl <span class="nt">-XGET</span>  <span class="s1">'localhost:9200/_search/scroll?scroll=1m&amp;scroll_id=c2Nhbjs2OzM0NDg1ODpzRlBLc0FXNlNyNm5JWUc1'</span>

</code></pre></div></div>
<h4 id="相关原理">相关原理</h4>
<ul>
  <li>倒排索引
    <ol>
      <li>key =&gt; value-index =&gt; value</li>
      <li>分词、过滤助动叹词、相似词合并</li>
      <li>索引建立</li>
    </ol>
  </li>
  <li>分布式
    <ol>
      <li>Elasticsearch也是会对数据进行切分，同时每一个分片会保存多个副本</li>
      <li>数据写入和索引建立，都是先在master完成再同步到slave</li>
      <li>选举策略和zk/redis集成都很类似(拜占庭将军问题)
        <ol>
          <li>master节点宕机了，那么会重新选举一个节点为master节点。</li>
          <li>如果是非master节点宕机了，那么会由master节点，让那个宕机节点上的primary shard的身份转移到其他机器上的replica shard。
修复了那个宕机机器，重启了之后，master节点会控制将缺失的replica shard分配过去，同步后续修改的数据之类的，让集群恢复正常。</li>
        </ol>
      </li>
      <li>分布式查询操作类似Map/Reduce</li>
      <li>NRT(Near RealTime)
        <ul>
          <li>默认是每隔1秒refresh一次的，所以es是准实时的，因为写入的数据1秒之后才能被看到。</li>
          <li>-&gt; buffer -&gt; segment file -&gt; os cache -&gt; 磁盘</li>
          <li>-&gt; trans_log -&gt; os cache -&gt; 磁盘</li>
          <li>refresh、flush、translog、merge</li>
        </ul>
      </li>
      <li>默认primary shard=5，replica=1共计10shard</li>
      <li>es写数据过程
        <ol>
          <li>客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）</li>
          <li>coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</li>
          <li>实际的node上的primary shard处理请求，然后将数据同步到replica node</li>
          <li>coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端</li>
        </ol>
      </li>
      <li>es读取数据过程
        <ol>
          <li>客户端发送请求到任意一个node，成为coordinate node</li>
          <li>coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡</li>
          <li>接收请求的node返回document给coordinate node</li>
          <li>coordinate node返回document给客户端</li>
        </ol>
      </li>
    </ol>
  </li>
</ul>

<h5 id="参考资料">参考资料</h5>
<ul>
  <li><a href="http://developer.51cto.com/art/201904/594615.htm">http://developer.51cto.com/art/201904/594615.htm</a></li>
  <li><a href="https://www.jianshu.com/p/b3f987b0fbf1">https://www.jianshu.com/p/b3f987b0fbf1</a></li>
</ul>

<h4 id="实战总结亿级性能">实战总结亿级性能</h4>
<ul>
  <li>用内存换速度
 es的搜索引擎严重依赖于底层的filesystem cache，你如果给filesystem cache更多的内存，尽量让内存可以容纳所有的indx segment file索引数据文件，
 那么你搜索的时候就基本都是走内存的，性能会非常高。归根结底，你要让es性能要好，最佳的情况下，就是你的机器的内存，至少可以容纳你的总数据量的一半.</li>
  <li>减少es中的无用字段的数据量(es+hbase)</li>
  <li>数据预热，冷热分离，冗余数据</li>
  <li>由应用服务器完成某些逻辑及运算操作</li>
  <li>使用sroll api优化分页性能</li>
</ul>

<h5 id="实战案例">实战案例</h5>
<ul>
  <li>5台机器，每台机器是6核64G的，集群总内存是320G</li>
  <li>es集群的日增量数据大概是2000万条，每天日增量数据大概是500MB，每月增量数据大概是6亿，15G。（数据总量大概是100G左右）</li>
  <li>index数据量预估，shard个数预估（不支持后续增加shard需要重建),建议每个shard小于30G</li>
</ul>

<h4 id="java实战教程">java实战教程</h4>
<p><a href="https://www.jianshu.com/p/3fa27dda63ab">https://www.jianshu.com/p/3fa27dda63ab</a></p>

<h4 id="lucene--nutch2002--solr2004--elasticsearch2010">lucene &amp; nutch（2002） &amp; Solr（2004）&amp;  Elasticsearch（2010）</h4>
<ul>
  <li>Lucene其实是一个提供全文文本搜索的函数库，它不是一个应用软件</li>
  <li>Nutch = Lucene + 爬虫</li>
  <li>Solr 是基于Lucene的一套完整的搜索服务属于Apache开源项目
    <h5 id="solr--es">Solr &amp; es</h5>
  </li>
</ul>

<p><a href="https://www.cnblogs.com/yinhaiming/articles/1542921.html">https://www.cnblogs.com/yinhaiming/articles/1542921.html</a></p>

<p><a href="https://www.cnblogs.com/fosilzhou/articles/4629220.html">https://www.cnblogs.com/fosilzhou/articles/4629220.html</a></p>

<h4 id="其他">其他</h4>
<ul>
  <li>ELK 系统，也就是日志分析系统。其中 E 就是 Elasticsearch，L 是 Logstash，是一个日志收集系统，K 是 Kibana，是一个数据可视化平台。</li>
  <li>ElasticSearch + Hbase</li>
</ul>
<p><a href="https://www.aboutyun.com/thread-14986-1-1.html">https://www.aboutyun.com/thread-14986-1-1.html</a></p>

<p><a href="https://www.aboutyun.com/forum.php?mod=viewthread&amp;tid=17406&amp;page=1">https://www.aboutyun.com/forum.php?mod=viewthread&amp;tid=17406&amp;page=1</a></p>

<p><a href="https://www.jianshu.com/p/366d9bd38d14">https://www.jianshu.com/p/366d9bd38d14</a></p>

<p><a href="https://blog.csdn.net/JENREY/article/details/81290535">https://blog.csdn.net/JENREY/article/details/81290535</a></p>

<p>网络爬虫将抓取到的HTML页面解析完成之后，把解析出的数据加入缓冲区队列，由其他两个线程负责处理数据，
一个线程负责将数据保存到分布式数据库，一个线程负责将数据提交到搜索引擎进行索引。
https://blog.csdn.net/xiaoyu714543065/article/details/10374191
https://www.ibm.com/developerworks/cn/opensource/os-cn-BigInsightsNutchSolr/
nutch是分布式爬虫系统，solr是搜索引擎。
（1） Nutch诞生于2002年8月，是Apache旗下的一个用Java实现的开源搜索引擎项目，
自Nutch1.2版本之后，Nutch已经从搜索引擎演化为网络爬虫，接着Nutch进一步演化为两大分支版本：1.X和2.X，
这两大分支最大的区别在于2.X对底层的数据存储进行了抽象以支持各种底层存储技术。
（2） 1.x版本是基于Hadoop架构的，底层存储使用的是HDFS，而2.x通过使用Apache Gora，
使得Nutch可以访问HBase、Accumulo、Cassandra、MySQL、DataFileAvroStore、AvroStore等NoSQL。
（3）nutch主要用于采集网页，solr可以作为搜索服务器。nutch+solr可以搭建一个简单的搜索引擎。
（4）简单地讲，nutch就是用于分布式采集数据源，solr用于建索引和搜索服务。</p>
:ET