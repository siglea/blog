<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>粉笔灰杂谈</title>
    <description>关于产品、技术、商业的一些见解，顺便记录一下自己的生活感悟和读书笔记。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 May 2020 17:09:42 +0800</pubDate>
    <lastBuildDate>Wed, 06 May 2020 17:09:42 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title> SpringCloud </title>
        <description>&lt;h3 id=&quot;关于微服务&quot;&gt;关于微服务&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SOA(ESB)与微服务
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30477325&quot;&gt;https://zhuanlan.zhihu.com/p/30477325&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/guanghe/p/10978349.html&quot;&gt;https://www.cnblogs.com/guanghe/p/10978349.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/9YxdCkl98kZq_Bh_DqwCmA&quot;&gt;https://mp.weixin.qq.com/s/9YxdCkl98kZq_Bh_DqwCmA&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;微服务哪些事
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://windmt.com/2018/04/14/spring-cloud-0-microservices/&quot;&gt;https://windmt.com/2018/04/14/spring-cloud-0-microservices/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://windmt.com/2018/04/14/spring-cloud-1-services-governance/&quot;&gt;https://windmt.com/2018/04/14/spring-cloud-1-services-governance/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SpringCloud &amp;amp; Dubbo
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qDiSn29uqSpA0yaM07nmbQ&quot;&gt;https://mp.weixin.qq.com/s/qDiSn29uqSpA0yaM07nmbQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/GSLXRnl0pg5ynVwbQcon7A&quot;&gt;https://mp.weixin.qq.com/s/GSLXRnl0pg5ynVwbQcon7A&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.ityouknow.com/springcloud/2017/11/20/dubbo-update-again.html&quot;&gt;阿里Dubbo与Spring Cloud&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RPC之thrift/gRPC
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/kesonyk/article/details/50924489&quot;&gt;https://blog.csdn.net/kesonyk/article/details/50924489&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.51cto.com/art/201908/601617.htm&quot;&gt;https://developer.51cto.com/art/201908/601617.htm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011478469&quot;&gt;https://segmentfault.com/a/1190000011478469&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/136112210&quot;&gt;https://zhuanlan.zhihu.com/p/136112210&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebService某种程度上也是一种RPC
    &lt;ul&gt;
      &lt;li&gt;WebService的历史 &lt;a href=&quot;https://www.iteye.com/blog/andot-662787&quot;&gt;https://www.iteye.com/blog/andot-662787&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;WebService的demo&lt;a href=&quot;https://blog.csdn.net/weixin_42672054/article/details/81708464&quot;&gt;https://blog.csdn.net/weixin_42672054/article/details/81708464&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2000年左右出现xml，借此微软等联盟推出了基于XML的SOAP协议，实现各系统之间的通信&lt;/li&gt;
      &lt;li&gt;thrift/webservice等可以生成客户端代码，隐藏了底层通信细节，对象化了数据（否则需要自行解析）&lt;/li&gt;
      &lt;li&gt;thrift、dobbo等方式基于TCP实现，主要是性能方面的考虑吧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;just-do-springcloud&quot;&gt;Just Do SpringCloud&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;首选 &lt;a href=&quot;https://windmt.com/tags/Spring-Cloud/&quot;&gt;https://windmt.com/tags/Spring-Cloud/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.springcloud.cc/&quot;&gt;springcloud.cc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://springcloud.fun&quot;&gt;springcloud.fun&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/283286745/answer/763040709&quot;&gt;大话SpringCloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geekdigging.com&quot;&gt;https://www.geekdigging.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常见组件&quot;&gt;常见组件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;服务配置中心（注册发现）：Netflix的Eureka、Apache的zookeeper、Spring家族的Spring Cloud Consul
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/5c5753d2aeb0&quot;&gt;Zookeeper保证的是CP，Eureka保证的是AP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;客户端负载均衡：Netflix Ribbon (提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。)
    &lt;ul&gt;
      &lt;li&gt;客户端负载均衡(Ribbon)服务实例的清单在客户端，客户端进行负载均衡算法分配。(从上面的知识我们已经知道了：客户端可以从Eureka Server中得到一份服务清单，在发送请求时通过负载均衡算法，在多个服务器之间选择一个进行访问)
Zuul路由的业务，对业务进行了归类，并交给了对应的微服务。&lt;/li&gt;
      &lt;li&gt;服务端负载均衡(Nginx)服务实例的清单在服务端，服务器进行负载均衡算法分配,
Nginx路由请求的压力，对请求进行平均后，交给了服务器处理。&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/kongxianghai/p/8477781.html&quot;&gt;撸一撸Spring Cloud Ribbon的原理-负载均衡策略&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;熔断器：Netflix Hystrix（Envoy)&lt;/li&gt;
  &lt;li&gt;Spring Cloud Feign：它基于 Netflix Feign 实现，整合了 Spring Cloud Ribbon 与 Spring Cloud Hystrix, 除了整合这两者的强大功能之外，它还提 供了声明式的服务调用(不再通过RestTemplate)。&lt;/li&gt;
  &lt;li&gt;服务网关: Netflix Zuul  、 Spring Cloud GateWay&lt;/li&gt;
  &lt;li&gt;分布式配置：Spring Cloud Config (Chef)&lt;/li&gt;
  &lt;li&gt;时间消息总线：Spring Cloud Bus&lt;/li&gt;
  &lt;li&gt;链路追踪：Spring Cloud Sleuth 与 Twitter Zipkin&lt;/li&gt;
  &lt;li&gt;数据流：Spring Cloud Stream (数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。)&lt;/li&gt;
  &lt;li&gt;服务监控：Zabbix、Nagios、Metrics、Spectator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;相关组件&quot;&gt;相关组件&lt;/h3&gt;
&lt;h4 id=&quot;zookeeper&quot;&gt;zookeeper&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;简单理解，zk就是一套简单的文件系统结构，本目录(节点)可以设置value及subNode,
并且该节点可以设置不同的权限（默认/用户名+密码/ip/秘钥，这4种)&lt;/li&gt;
  &lt;li&gt;zk集群简单理解就是，基于ZAB一致性算法的变种keep alived集群&lt;/li&gt;
  &lt;li&gt;zk集群是CP模型，强一致性的，也就是说数据出现了不一致性（通常是节点挂了），整个服务集群就会Hold住等待数据一致，
所以，这个缺点导致zk并不是最佳的注册中心，因为服务注册中心AP模型最好，部分服务有问题并不表示所有服务不可用。&lt;/li&gt;
  &lt;li&gt;zookeeper 命令 &lt;a href=&quot;https://blog.csdn.net/feixiang2039/article/details/79810102&quot;&gt;https://blog.csdn.net/feixiang2039/article/details/79810102&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Curator实现的zk分布式锁 &lt;a href=&quot;https://www.sohu.com/a/341386202_315839&quot;&gt;https://www.sohu.com/a/341386202_315839&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/SpringCloud.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/SpringCloud.html</guid>
        
        <category>SpringCloud</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Nginx </title>
        <description>
</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Nginx.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Nginx.html</guid>
        
        <category>Nginx</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Ansible </title>
        <description>
</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Ansible.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Ansible.html</guid>
        
        <category>Ansible</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Java ClassLoader </title>
        <description>
</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/ClassLoader.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/ClassLoader.html</guid>
        
        <category>JVM</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> SpringBoot </title>
        <description>&lt;h4 id=&quot;spring-boot-是什么&quot;&gt;Spring Boot 是什么？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring 是一个“引擎”；&lt;/li&gt;
  &lt;li&gt;Spring MVC 是基于Spring的一个 MVC 框架；&lt;/li&gt;
  &lt;li&gt;Spring Boot 是基于Spring的条件注册的一套快速开发整合包。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;springboot启动原理-&quot;&gt;SpringBoot启动原理 ☆☆☆&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resourceLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PrimarySources must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primarySources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 1. 推测ApplicationType&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webApplicationType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deduceFromClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2. 根据spring.factories初始化ApplicationContextInitializer 与 ApplicationListener&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationContextInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 3. 推测 Main入口&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deduceMainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringBootExceptionReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureHeadlessProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplicationRunListeners&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRunListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 4. SpringApplicationRunListeners生命周期之started()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;starting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultApplicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 5. 准备环境 及 SpringApplicationRunListeners生命周期之environmentPrepared()&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;ConfigurableEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureIgnoreBeanInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringBootExceptionReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 6. 初始化类加载器、bean产生器、资源加载器等，打印banner&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 7. 触发 @EnableAutoConfiguration 自动装配相关beans及configuration等&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//    SpringApplicationRunListeners生命周期之contextPrepared()/contextLoaded()&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refreshContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;afterRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStartupInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StartupInfoLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;启动原理解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://tengj.top/2017/03/09/springboot3/&quot;&gt;http://tengj.top/2017/03/09/springboot3/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动装配之@ComponentScan详解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mapleleafforest/article/details/86623578&quot;&gt;https://blog.csdn.net/mapleleafforest/article/details/86623578&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动装配之@EnableAutoConfiguration详解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mapleleafforest/article/details/87273213&quot;&gt;https://blog.csdn.net/mapleleafforest/article/details/87273213&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot自动配置-&quot;&gt;SpringBoot自动配置 ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;SpringBoot项目配置注解@EnableAutoConfiguration后&lt;/li&gt;
  &lt;li&gt;SpringBoot启动扫描META-INF下的spring.factories&lt;/li&gt;
  &lt;li&gt;spring.factories子配置项org.springframework.boot.autoconfigure.EnableAutoConfiguration配置了所有可以自动配置的组件&lt;/li&gt;
  &lt;li&gt;各个XXXAutoConfiguration按照各自的ConditionalOnClass/OnBean等，判断是否加载XXX配置&lt;/li&gt;
  &lt;li&gt;根据XXX配置的@Import加载相关的其他类，之后通过反射机制初始化Bean&lt;/li&gt;
  &lt;li&gt;之后即可通过注入的方式使用
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 比如DataSourceAutoConfiguration的自动配置是检测到DataSource.class 与 EmbeddedDatabaseType.class存在&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// DataSource是javax包中自带，而EmbeddedDatabaseType存在于spring-boot-starter-jdbc中&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 因此在pom中引入spring-boot-starter-jdbc后，即可触发加载操作&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 接下来就是根据spring.datasource相关配置初始化PooledDataSource 或者 直接使用EmbeddedDatabase&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConditionalOnClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmbeddedDatabaseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSourceProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSourcePoolMetadataProvidersConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceInitializationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceAutoConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;DataSourceAutoConfiguration解析&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/kangsa998/article/details/90231518&quot;&gt;https://blog.csdn.net/kangsa998/article/details/90231518&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springboot的starter-&quot;&gt;SpringBoot的Starter ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;徒手撸一个SpringBoot中的Starter ，解密自动化配置黑魔法！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lenve/p/10892011.html&quot;&gt;https://www.cnblogs.com/lenve/p/10892011.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringBoot启动机制（starter机制）核心原理详解&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d166d935217b&quot;&gt;https://www.jianshu.com/p/d166d935217b&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个Spring boot stater&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/fdb574e1f77c&quot;&gt;https://www.jianshu.com/p/fdb574e1f77c&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot常用注解&quot;&gt;SpringBoot常用注解&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Conditional
@SpringBootConfiguration
@EnableAutoConfiguration
@SpringBootApplication
@Configuration：代表这个类是一个配置类。
@ComponentScan：用来扫描指定包下面的注解类。
@Import：用来导入其他的@Configuration配置类。
@ImportResource：用来导入xml配置文件，比如某些配置一定要xml配置。
@Bean：用来定义一个bean，可以指定初始、销毁方法，及bean范围等。
@Controller 标识一个类为控制器。
@RequestMapping URL的映射。
@ResponseBody 返回结果转换为JSON字符串。
@RequestBody 表示接收JSON格式字符串参数。
@RestController这个注解，而不是@Controller，不过这个注解同样不是Spring boot提供的，而是Spring MVC4中的提供的注解，表示一个支持Restful的控制器。
这个类中有三个URL映射是相同的，即都是/article/{id}，这在@Controller标识的类中是不允许出现的。这里的可以通过method来进行区分，produces的作用是表示返回结果的类型是JSON。
@PathVariable这个注解，也是Spring MVC提供的，其作用是表示该变量的值是从访问路径中获取。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;27个核心注解
&lt;a href=&quot;https://mp.weixin.qq.com/s/E2DyzV1cgUn1T5PfE92KSA&quot;&gt;https://mp.weixin.qq.com/s/E2DyzV1cgUn1T5PfE92KSA&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springwebapplication-与-servlet&quot;&gt;SpringWebApplication 与 Servlet&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Servlet是JavaWeb的核心，可以理解为CGI的Java线程版本&lt;/li&gt;
  &lt;li&gt;SpringMVC核心用到DispatcherServlet，可以配置多个urlMapping&lt;/li&gt;
  &lt;li&gt;Struts2/SpringMVC是基于Servlet实现分发，而Struts1是基于Filter&lt;/li&gt;
  &lt;li&gt;一个SpringWebApplication可以定义多个Servlet，需要区分urlMapping&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;springboot-中的-tomcat-是如何启动的&quot;&gt;SpringBoot 中的 Tomcat 是如何启动的？&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qpLgkXOkccwCQbWoaEpqUQ&quot;&gt;https://mp.weixin.qq.com/s/qpLgkXOkccwCQbWoaEpqUQ&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springjdbc--mybatis--spring-data--jpa&quot;&gt;SpringJDBC / Mybatis / Spring Data / JPA&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Mybatis的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/12/03/springboot/chapter-thirty-five/&quot;&gt;https://blog.lqdev.cn/2018/12/03/springboot/chapter-thirty-five/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Mybatis-plus的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/07/21/springboot/chapter-nine/&quot;&gt;https://blog.lqdev.cn/2018/07/21/springboot/chapter-nine/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;spring-security--apache-shrio--jwt-javawebtoken&quot;&gt;Spring Security / Apache Shrio / JWT JavaWebToken&lt;/h4&gt;

&lt;h4 id=&quot;springboot-打出来的war中的webxml消失了&quot;&gt;SpringBoot 打出来的war中的web.xml消失了&lt;/h4&gt;
&lt;p&gt;springboot 是如何帮我们省去web.xml配置的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/3c94d7e76998?utm_source=oschina-app&quot;&gt;https://www.jianshu.com/p/3c94d7e76998?utm_source=oschina-app&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;webmvcconfigureradapter-与-webmvcconfigurationsupport&quot;&gt;WebMvcConfigurerAdapter 与 WebMvcConfigurationSupport&lt;/h4&gt;
&lt;p&gt;(遇到的一个坑查了半天)
&lt;a href=&quot;https://blog.csdn.net/innovationad/article/details/79959383&quot;&gt;https://blog.csdn.net/innovationad/article/details/79959383&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot之actuator&quot;&gt;SpringBoot之Actuator&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot Actuator:健康检查、审计、统计和监控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d5943e303a1f&quot;&gt;https://www.jianshu.com/p/d5943e303a1f&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;监控管理之Spring Boot Admin使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/09/14/springboot/chapter-twenty-eight/&quot;&gt;https://blog.lqdev.cn/2018/09/14/springboot/chapter-twenty-eight/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot日志管理之aop统一日志&quot;&gt;SpringBoot日志管理之AOP统一日志&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/24/springboot/chapter-twenty-four/&quot;&gt;https://blog.lqdev.cn/2018/08/24/springboot/chapter-twenty-four/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot日志管理之追加统一traceid&quot;&gt;SpringBoot日志管理之追加统一traceId&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.ModelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.handler.HandlerInterceptorAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogTraceInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateNonceNumStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xhs&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${LOG_HOME}/app.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileNamePattern&amp;gt;&lt;/span&gt;${LOG_HOME}/app.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileNamePattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxHistory&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxHistory&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{HH:mm:ss.SSS} %X{traceId} [%thread] %-5level %c{10} - %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;charset&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/charset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;springboot--dubbo&quot;&gt;SpringBoot &amp;amp; Dubbo&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/09/28/springboot/chapter-twenty-nine/&quot;&gt;https://blog.lqdev.cn/2018/09/28/springboot/chapter-twenty-nine/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot-异步的各种实现&quot;&gt;SpringBoot 异步的各种实现&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;异步开发之异步请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/16/springboot/chapter-twenty/&quot;&gt;https://blog.lqdev.cn/2018/08/16/springboot/chapter-twenty/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;异步开发之异步调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/17/springboot/chapter-twenty-one/&quot;&gt;https://blog.lqdev.cn/2018/08/17/springboot/chapter-twenty-one/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wjc9ImJfxcYpyAKEw-3AgA&quot;&gt;https://mp.weixin.qq.com/s/wjc9ImJfxcYpyAKEw-3AgA&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;事件的发布和监听&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/06/springboot/chapter-thirty-two/&quot;&gt;https://blog.lqdev.cn/2018/11/06/springboot/chapter-thirty-two/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RabbitMQ的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/07/24/springboot/chapter-twelve/&quot;&gt;https://blog.lqdev.cn/2018/07/24/springboot/chapter-twelve/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2019/07/21/springboot/chapter-thirty-eight/&quot;&gt;https://blog.lqdev.cn/2019/07/21/springboot/chapter-thirty-eight/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot--webservice&quot;&gt;SpringBoot &amp;amp; WebService&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring web Servcies集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/09/springboot/chapter-thirty-three/&quot;&gt;https://blog.lqdev.cn/2018/11/09/springboot/chapter-thirty-three/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CXF构建WebService服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/12/springboot/chapter-thirty-four/&quot;&gt;https://blog.lqdev.cn/2018/11/12/springboot/chapter-thirty-four/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ltw-in-jdk-or-springboot&quot;&gt;LTW In Jdk Or SpringBoot&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/takumicx/p/10150344.html&quot;&gt;https://www.cnblogs.com/takumicx/p/10150344.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;集成框架spring-integration-mule-esb-or-apache-camel比较&quot;&gt;集成框架Spring Integration, Mule ESB or Apache Camel比较&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jdon.com/soa/integration-framework-comparison-spring.html&quot;&gt;https://www.jdon.com/soa/integration-framework-comparison-spring.html&lt;/a&gt;
&lt;a href=&quot;https://www.jianshu.com/p/68aba8d09a89&quot;&gt;https://www.jianshu.com/p/68aba8d09a89&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/Spring.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/Spring.html</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> JVM 常用工具 </title>
        <description>&lt;h4 id=&quot;jmap--内存占用情况查询&quot;&gt;jmap : 内存占用情况查询&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 查询某个pid进程对应的应用程序内存占用情况&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; pid
 
&lt;span class=&quot;c&quot;&gt;## 示例1&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; 5940

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@VM_0_8_centos ~]# jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; 27472
Attaching to process ID 27472, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.171-b11

using thread-local object allocation.
Parallel GC with 2 thread&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Heap Configuration:
   MinHeapFreeRatio         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
   MaxHeapFreeRatio         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
   MaxHeapSize              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2051014656 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1956.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   NewSize                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 42991616 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   MaxNewSize               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 683671552 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;652.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   OldSize                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 87031808 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;83.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   NewRatio                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
   SurvivorRatio            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8
   MetaspaceSize            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 21807104 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20.796875MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   CompressedClassSpaceSize &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1073741824 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1024.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   MaxMetaspaceSize         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 17592186044415 MB
   G1HeapRegionSize         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Heap Usage:
PS Young Generation
Eden Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 37224448 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 14139096 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;13.484092712402344MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 23085352 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;22.015907287597656MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   37.98335975324604% used
From Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3145728 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2929584 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7938690185546875MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 216144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.2061309814453125MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   93.12896728515625% used
To Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3670016 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3670016 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   0.0% used
PS Old Generation
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 165150720 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;157.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 98856376 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;94.27678680419922MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 66294344 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;63.22321319580078MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   59.8582773359995% used

26452 interned Strings occupying 2659208 bytes.

&lt;span class=&quot;c&quot;&gt;## 示例2&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-histo&lt;/span&gt; 16464 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 16464.log
&lt;span class=&quot;nt&quot;&gt;-histo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;”. 如果live子参数加上后,只统计活的对象数量. 

&lt;span class=&quot;c&quot;&gt;## 示例2&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-dump&lt;/span&gt;:format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;b,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;outfile 3024可以将3024进程的内存heap输出出来到outfile文件里，再配合MAT（内存分析工具）。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jstat-可以实时监测系统资源占用与jvm运行情况&quot;&gt;jstat: 可以实时监测系统资源占用与jvm运行情况&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 命令语法结构：
Usage: jstat -help|-options
       jstat -&amp;lt;option&amp;gt; [-t] [-h&amp;lt;lines&amp;gt;] &amp;lt;vmid&amp;gt; [&amp;lt;interval&amp;gt; [&amp;lt;count&amp;gt;]]
## 参数解释：
Options — 选项，我们一般使用 -gcutil 查看gc情况
-t      — 输出Timestamp
vmid    — VM的进程号，即当前运行的java进程号
interval– 间隔时间，单位为秒或者毫秒
count   — 打印次数，如果缺省则打印无数次
 
S0  — Heap上的 Survivor space 0 区已使用空间的百分比
S1  — Heap上的 Survivor space 1 区已使用空间的百分比
E   — Heap上的 Eden space 区已使用空间的百分比
O   — Heap上的 Old space 区已使用空间的百分比
P   — Perm space 区已使用空间的百分比
YGC — 从应用程序启动到采样时发生 Young GC 的次数
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
FGC — 从应用程序启动到采样时发生 Full GC 的次数
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)

## jstat -options
    -class 类加载统计
    -compiler 编译统计 
    -gc
    -gccapacity
    -gccause Allocation Failure
    -gcmetacapacity 元数据空间统计
    -gcnew
    -gcnewcapacity
    -gcold
    -gcoldcapacity
    -gcutil 总结垃圾回收统计
    -printcompilation JVM编译方法统计

## 示例1 总结垃圾回收统计
[root@VM_0_8_centos ~]# jstat -gcutil 27472 1000 5
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
 78.04   0.00  14.10  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  24.05  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  34.14  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  40.62  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  47.20  61.31  96.88  94.27    288    5.612     4    3.335    8.947

## 示例2 类加载统计
[root@VM_0_8_centos ~]# jstat -class -t 27472 1000 5
Timestamp       加载class的数量  所占用空间大小  未加载数量  未加载占用空间     Time(秒)
Timestamp       Loaded  Bytes  Unloaded  Bytes     Time
         5359.3  10847 20148.1        0     0.0      46.25
         5360.4  10847 20148.1        0     0.0      46.25
         5361.4  10847 20148.1        0     0.0      46.25
         5362.3  10847 20148.1        0     0.0      46.25
         5363.3  10847 20148.1        0     0.0      46.25

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;jstat命令使用
&lt;a href=&quot;https://www.cnblogs.com/lizhonghua34/p/7307139.html&quot;&gt;https://www.cnblogs.com/lizhonghua34/p/7307139.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JVM运行时内存使用情况监控
&lt;a href=&quot;https://blog.csdn.net/zmx729618/article/details/78392715&quot;&gt;https://blog.csdn.net/zmx729618/article/details/78392715&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/JVM-Util.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/JVM-Util.html</guid>
        
        <category>JVM</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Docker</title>
        <description>&lt;h4 id=&quot;docker原理-&quot;&gt;Docker原理 ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;cgroups (2006年 linux推出)&lt;/li&gt;
  &lt;li&gt;namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-hello-world&quot;&gt;Docker Hello World!&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
docker run ubuntu:15.10 /bin/echo &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;docker-pull-image&quot;&gt;Docker pull Image&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull library/hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;docker-run-nginx&quot;&gt;docker run nginx&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; my_nginx_v1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx:v1
&lt;span class=&quot;c&quot;&gt;## --name nginx-test：容器名称。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## -p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## -d nginx： 设置容器在在后台一直运行。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/docker/docker-install-nginx.html&quot;&gt;https://www.runoob.com/docker/docker-install-nginx.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;docker-run-springboot&quot;&gt;docker run springboot&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; springboot/spring-boot-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html&quot;&gt;http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;查看运行的容器&quot;&gt;查看运行的容器&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输出详情介绍：&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## CONTAINER ID: 容器 ID。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## IMAGE: 使用的镜像。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## COMMAND: 启动容器时运行的命令。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## CREATED: 容器的创建时间。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## STATUS: 容器状态。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 状态有7种：&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### created（已创建）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### restarting（重启中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### running（运行中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### removing（迁移中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### paused（暂停）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### exited（停止）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### dead（死亡）&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## NAMES: 自动分配的容器名称。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;查看容器内的标准输出日志&quot;&gt;查看容器内的标准输出日志&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs 2b1b7a428627
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;启动重启停止容器&quot;&gt;启动/重启/停止容器&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start/restart amazing_cori
docker stop 2b1b7a428627
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;删除容器镜像&quot;&gt;删除容器/镜像&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;20ca2a70ee13
docker rmi ec49dbd13cf5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;compose-machine-swarm&quot;&gt;Compose Machine Swarm&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker/2018/03/22/docker-compose.html&quot;&gt;http://www.ityouknow.com/docker/2018/03/22/docker-compose.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;docker中run和start的区别&quot;&gt;docker中run和start的区别&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;docker run 后面指定的是一个镜像&lt;/li&gt;
  &lt;li&gt;而docker start指定的是一个容器&lt;/li&gt;
  &lt;li&gt;docker run是利用镜像生成容器，并启动容器，而docker start是启动一个之前生成过的容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dockerfile-命令详解&quot;&gt;Dockerfile 命令详解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html&quot;&gt;http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker.html&quot;&gt;http://www.ityouknow.com/docker.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cloud-foundry和-kubernetes-的区别&quot;&gt;Cloud Foundry和 Kubernetes 的区别&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_30154571/article/details/84955097&quot;&gt;https://blog.csdn.net/qq_30154571/article/details/84955097&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cloud-foundry-与kubernetes-cfk8s结合简史&quot;&gt;Cloud Foundry 与Kubernetes: CF/K8s结合简史&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhanggongsw/article/details/79948420&quot;&gt;https://blog.csdn.net/zhanggongsw/article/details/79948420&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;阿里飞天云apsara-stack和openstack&quot;&gt;阿里飞天云Apsara Stack和OpenStack&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/liuxiao723846/article/details/82630926&quot;&gt;https://blog.csdn.net/liuxiao723846/article/details/82630926&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.csdn.net/gather_21/MtTaYg1sNTY5Mi1ibG9n.html&quot;&gt;https://www.csdn.net/gather_21/MtTaYg1sNTY5Mi1ibG9n.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kubernetes-vs-openstack&quot;&gt;Kubernetes vs OpenStack&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/luanpeng825485697/article/details/86706131&quot;&gt;https://blog.csdn.net/luanpeng825485697/article/details/86706131&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/dualvencsdn/article/details/79207281&quot;&gt;https://blog.csdn.net/dualvencsdn/article/details/79207281&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubernetes.org.cn/2121.html&quot;&gt;https://www.kubernetes.org.cn/2121.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/goldsunshine/p/9872142.html&quot;&gt;https://www.cnblogs.com/goldsunshine/p/9872142.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;google-kubernetes--docker-swarm--mesos-marathon&quot;&gt;Google Kubernetes &amp;amp; Docker Swarm &amp;amp; Mesos Marathon&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubernetes.org.cn/757.html&quot;&gt;https://www.kubernetes.org.cn/757.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/55391506&quot;&gt;https://www.zhihu.com/question/55391506&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wzj4858/p/7910883.html&quot;&gt;https://www.cnblogs.com/wzj4858/p/7910883.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dockone.io/article/823&quot;&gt;http://dockone.io/article/823&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28301108&quot;&gt;https://zhuanlan.zhihu.com/p/28301108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;国内外paas服务一览&quot;&gt;国内外PaaS服务一览&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/a4b9be650fa4&quot;&gt;https://www.jianshu.com/p/a4b9be650fa4&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/12/Docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/12/Docker.html</guid>
        
        <category>Docker</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> 主流互联网公司系统概况及指标 </title>
        <description>&lt;h4 id=&quot;微信&quot;&gt;微信&lt;/h4&gt;

&lt;h4 id=&quot;淘宝&quot;&gt;淘宝&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;2018年双11 交易创建30万QPS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/RjioDaUtxppie9FNv-o8rw&quot;&gt;https://mp.weixin.qq.com/s/RjioDaUtxppie9FNv-o8rw&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2019年双11 交易峰值54.5万笔/秒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/q3kSWp5DTgo6i6vp3p9MuQ&quot;&gt;https://mp.weixin.qq.com/s/q3kSWp5DTgo6i6vp3p9MuQ&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阿里巴巴双11千万级实时监控系统技术揭秘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Ucs1uq_IOJ0NH9OtZprS4Q&quot;&gt;https://mp.weixin.qq.com/s/Ucs1uq_IOJ0NH9OtZprS4Q&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2019双11，支付宝有哪些“秘密武器”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wsQ_SMgXZ59cWLzOg_iD8g&quot;&gt;https://mp.weixin.qq.com/s/wsQ_SMgXZ59cWLzOg_iD8g&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;诺亚 (Noah) 自适应流控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/UOOGzjsiWHE1FOtgx8S6&quot;&gt;https://www.infoq.cn/article/UOOGzjsiWHE1FOtgx8S6&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;12306&quot;&gt;12306&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2771&amp;amp;ctid=22&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2771&amp;amp;ctid=22&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;微博&quot;&gt;微博&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/shanyou/p/5048099.html&quot;&gt;https://www.cnblogs.com/shanyou/p/5048099.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;唯品会&quot;&gt;唯品会&lt;/h4&gt;
&lt;p&gt;唯品会OSP 微服务架构
用户鉴权系统举例，单台服务器压力测试约为25000QPS，全域提供约25万QPS的服务能力
&lt;a href=&quot;https://mp.weixin.qq.com/s/fy31Qb7OCW3UuTx0tj9iGQ&quot;&gt;https://mp.weixin.qq.com/s/fy31Qb7OCW3UuTx0tj9iGQ&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;达达&quot;&gt;达达&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/67b710267d10&quot;&gt;https://www.jianshu.com/p/67b710267d10&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;指标概述&quot;&gt;指标概述&lt;/h4&gt;
&lt;p&gt;https://mp.weixin.qq.com/s/4Dman7ts6X9vkF2iYrLFuA&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 10:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/01/03/IndexOfSystem.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/01/03/IndexOfSystem.html</guid>
        
        <category>linux</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>卧底经济学</title>
        <description>&lt;h4 id=&quot;三种市场失灵&quot;&gt;三种市场失灵&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;稀缺&lt;/li&gt;
  &lt;li&gt;信息缺失、信息不对等&lt;/li&gt;
  &lt;li&gt;外部效应&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 14 Dec 2019 16:10:02 +0800</pubDate>
        <link>http://localhost:4000/%E9%9A%8F%E8%AE%B0/2019/12/14/TheUndercoverEconomist.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E9%9A%8F%E8%AE%B0/2019/12/14/TheUndercoverEconomist.html</guid>
        
        <category>读书笔记</category>
        
        
        <category>随记</category>
        
      </item>
    
      <item>
        <title> Keepalived </title>
        <description>&lt;h3 id=&quot;keepalived是什么&quot;&gt;keepalived是什么&lt;/h3&gt;
&lt;p&gt;Keepalived软件起初是专为LVS负载均衡软件设计的，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能。因此，Keepalived除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件。
Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。
所以，Keepalived 一方面具有配置管理LVS的功能，同时还具有对LVS下面节点进行健康检查的功能，另一方面也可实现系统网络服务的高可用功能。&lt;/p&gt;

&lt;h3 id=&quot;keepalived工作原理&quot;&gt;keepalived工作原理&lt;/h3&gt;
&lt;p&gt;keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。
虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。
keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。&lt;/p&gt;

&lt;h3 id=&quot;keepalived官网&quot;&gt;keepalived官网&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.keepalived.org&quot;&gt;http://www.keepalived.org&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;常见容错机制&quot;&gt;常见容错机制&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;failover：失效转移
Fail-Over的含义为“失效转移”，是一种备份操作模式，当主要组件异常时，其功能转移到备份组件。其要点在于有主有备，且主故障时备可启用，并设置为主。如Mysql的双Master模式，当正在使用的Master出现故障时，可以拿备Master做主使用&lt;/li&gt;
  &lt;li&gt;failfast：快速失败
从字面含义看就是“快速失败”，尽可能的发现系统中的错误，使系统能够按照事先设定好的错误的流程执行，对应的方式是“fault-tolerant（错误容忍）”。以JAVA集合（Collection）的快速失败为例，当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常（发现错误执行设定好的错误的流程），产生fail-fast事件。&lt;/li&gt;
  &lt;li&gt;failback：失效自动恢复
Fail-over之后的自动恢复，在簇网络系统（有两台或多台服务器互联的网络）中，由于要某台服务器进行维修，需要网络资源和服务暂时重定向到备用系统。在此之后将网络资源和服务器恢复为由原始主机提供的过程，称为自动恢复&lt;/li&gt;
  &lt;li&gt;failsafe：失效安全
Fail-Safe的含义为“失效安全”，即使在故障的情况下也不会造成伤害或者尽量减少伤害。维基百科上一个形象的例子是红绿灯的“冲突监测模块”当监测到错误或者冲突的信号时会将十字路口的红绿灯变为闪烁错误模式，而不是全部显示为绿灯。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/clsn/p/8052649.html&quot;&gt;https://www.cnblogs.com/clsn/p/8052649.html&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Dec 2019 10:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/12/08/Keepalived.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2019/12/08/Keepalived.html</guid>
        
        <category>linux</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
