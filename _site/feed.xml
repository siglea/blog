<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>粉笔灰杂谈</title>
    <description>关于产品、技术、商业的一些见解，顺便记录一下自己的生活感悟和读书笔记。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 24 May 2020 21:10:11 +0800</pubDate>
    <lastBuildDate>Sun, 24 May 2020 21:10:11 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title> kafka activeMQ RabbitMq RocketMQ </title>
        <description>&lt;h4 id=&quot;amqp即advanced-message-queuing-protocolactivemqrabbitmq都支持&quot;&gt;AMQP，即Advanced Message Queuing Protocol（ActiveMQ、RabbitMQ都支持）&lt;/h4&gt;

&lt;h4 id=&quot;两种消息模型&quot;&gt;两种消息模型：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;点对点（单播），当采用点对点模型时，消息将发送到一个队列，该队列的消息只能被一个消费者消费。&lt;/li&gt;
  &lt;li&gt;publish-subscribe（发布订阅、广播）模型。而采用发布订阅模型时，消息可以被多个消费者消费。
在发布订阅模型中，生产者和消费者完全独立，不需要感知对方的存在。
例如，在用户登录后，各个其他模板更加登录进行不同的处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何保证可用性&quot;&gt;如何保证可用性&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;主从架构（ActiveMQ、RabbitMQ）&lt;/li&gt;
  &lt;li&gt;分布式架构（RocketMQ、kafka）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何保证消息不被重复消费&quot;&gt;如何保证消息不被重复消费？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;分析:这个问题其实换一种问法就是，如何保证消息队列的幂等性?这个问题可以认为是消息队列领域的基本问题。换句话来说，是在考察你的设计能力，这个问题的回答可以根据具体的业务场景来答，没有固定的答案。&lt;/li&gt;
  &lt;li&gt;回答:先来说一下为什么会造成重复消费?
  其实无论是那种消息队列，造成重复消费原因其实都是类似的。正常情况下，消费者在消费消息时候，消费完毕后，会发送一个确认信息给消息队列，消息队列就知道该消息被消费了，就会将该消息从消息队列中删除。只是不同的消息队列发送的确认信息形式不同,例如RabbitMQ是发送一个ACK确认消息，RocketMQ是返回一个CONSUME_SUCCESS成功标志，kafka实际上有个offset的概念，简单说一下(如果还不懂，出门找一个kafka入门到精通教程),就是每一个消息都有一个offset，kafka消费过消息后，需要提交offset，让消息队列知道自己已经消费过了。那造成重复消费的原因?，就是因为网络传输等等故障，确认信息没有传送到消息队列，导致消息队列不知道自己已经消费过该消息了，再次将该消息分发给其他的消费者。
  如何解决?这个问题针对业务场景来答分以下几点
  - 比如，你拿到这个消息做数据库的insert操作。那就容易了，给这个消息做一个唯一主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。
    &lt;ul&gt;
      &lt;li&gt;再比如，你拿到这个消息做redis的set的操作，那就容易了，不用解决，因为你无论set几次结果都是一样的，set操作本来就算幂等操作。
  - 如果上面两种情况还不行，上大招。准备一个第三方介质,来做消费记录。以redis为例，给消息分配一个全局id，只要消费过该消息，将&amp;lt;id,message&amp;gt;以K-V形式写入redis。那消费者开始消费前，先去redis中查询有没消费记录即可。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;消费者消费失败如何处理&quot;&gt;消费者消费失败，如何处理？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;消费成功时，手动ack，这样队列会再次推送或者再次pull&lt;/li&gt;
  &lt;li&gt;用redis对立的”伪消费队列”最大的问题就是在于消费后没有ACK，发生意外会有很多脏数据&lt;/li&gt;
  &lt;li&gt;也可以用幂等的方式消费者保存业务的进展，用单独程序做补偿消费&lt;/li&gt;
  &lt;li&gt;如果消费者处理一个消息失败了，消息系统一般会把这个消息放回队列，这样其他消费者可以继续处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何保证消费的可靠性传输&quot;&gt;如何保证消费的可靠性传输?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RabbitMQ
    &lt;ul&gt;
      &lt;li&gt;生产者丢数据，可以用事务方式来保证发送成功或回滚，也可以队列接受后异步返回ack或nack来实现&lt;/li&gt;
      &lt;li&gt;消息队列丢数据，可以持久化队列并且配置自动重复参数&lt;/li&gt;
      &lt;li&gt;消费者丢数据，手动ack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kafka
    &lt;ul&gt;
      &lt;li&gt;(1)生产者丢数据
在kafka生产中，基本都有一个leader和多个follwer。follwer会去同步leader的信息。因此，为了避免生产者丢数据，做如下两点配置
        &lt;ol&gt;
          &lt;li&gt;第一个配置要在producer端设置acks=all。这个配置保证了，follwer同步完成后，才认为消息发送成功。&lt;/li&gt;
          &lt;li&gt;在producer端设置retries=MAX，一旦写入失败，这无限重试&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;消息队列丢数据
针对消息队列丢数据的情况，无外乎就是，数据还没同步，leader就挂了，这时zookpeer会将其他的follwer切换为leader,那数据就丢失了。针对这种情况，应该做两个配置。
        &lt;ol&gt;
          &lt;li&gt;replication.factor参数，这个值必须大于1，即要求每个partition必须有至少2个副本&lt;/li&gt;
          &lt;li&gt;min.insync.replicas参数，这个值必须大于1，这个是要求一个leader至少感知到有至少一个follower还跟自己保持联系
这两个配置加上上面生产者的配置联合起来用，基本可确保kafka不丢数据&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;消费者丢数据
这种情况一般是自动提交了offset，然后你处理程序过程中挂了。kafka以为你处理好了。再强调一次offset是干嘛的
offset：指的是kafka的topic中的每个消费组消费的下标。简单的来说就是一条消息对应一个offset下标，每次消费数据的时候如果提交offset，那么下次消费就会从提交的offset加一那里开始消费。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;推拉模式&quot;&gt;推拉模式&lt;/h4&gt;
&lt;p&gt;消费模式分为推（push）模式和拉（pull）模式。推模式是指由 Broker 主动推送消息至消费端，实时性较好，不过需要一定的流制机制来确保服务端推送过来的消息不会压垮消费端。而拉模式是指消费端主动向 Broker 端请求拉取（一般是定时或者定量）消息，实时性较推模式差，但是可以根据自身的处理能力而控制拉取的消息量。&lt;/p&gt;

&lt;h4 id=&quot;关于kafka&quot;&gt;关于kafka&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Apache Kafka不是消息中间件的一种实现。相反，它只是一种分布式流式系统。
不同于基于队列和交换器的RabbitMQ，Kafka的存储层是使用分区事务日志来实现的。&lt;/li&gt;
  &lt;li&gt;过期日志会根据时间或大小，进行清除&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;消息队列常见问题
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/williamjie/p/9481780.html&quot;&gt;https://www.cnblogs.com/williamjie/p/9481780.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;优知学院消息队列
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60288173&quot;&gt;https://zhuanlan.zhihu.com/p/60288173&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60288391&quot;&gt;https://zhuanlan.zhihu.com/p/60288391&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IM系统的MQ消息中间件选型：Kafka还是RabbitMQ？
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37993013&quot;&gt;https://zhuanlan.zhihu.com/p/37993013&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MQ消息队列的12点核心原理总结
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/60289322&quot;&gt;https://zhuanlan.zhihu.com/p/60289322&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 22 May 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/22/MessageQueue.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/22/MessageQueue.html</guid>
        
        <category>MQ</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Netty-Mina</title>
        <description>&lt;h4 id=&quot;从零开发一个im服务端&quot;&gt;从零开发一个IM服务端&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;通俗易懂 &lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2768&amp;amp;highlight=netty&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2768&amp;amp;highlight=netty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;基于Netty实现海量接入的推送服务技术要点 &lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=166&amp;amp;highlight=netty&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=166&amp;amp;highlight=netty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;必读有关为何选择netty的11个疑问及解答&quot;&gt;必读有关“为何选择Netty”的11个疑问及解答&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=163&amp;amp;highlight=netty&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=163&amp;amp;highlight=netty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp网关&quot;&gt;TCP网关&lt;/h4&gt;
&lt;p&gt;HAProxy nginx LVS&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;生产环境大部分还是采用通过rest方式获取IpList，然后有客户端直接发起长连接的方式&lt;/li&gt;
  &lt;li&gt;京东京麦的生产级TCP网关技术实践总结 &lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=1243&amp;amp;highlight=netty&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=1243&amp;amp;highlight=netty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;一套海量在线用户的移动端IM架构设计实践 &lt;a href=&quot;http://www.52im.net/thread-812-1-1.html&quot;&gt;http://www.52im.net/thread-812-1-1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reactor-线程模型&quot;&gt;Reactor 线程模型&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Reactor 是反应堆的意思，Reactor 模型是指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式。
服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor 模式也叫 Dispatcher 模式，即 I/O 多了复用统一监听事件，收到事件后分发(Dispatch 给某进程)，是编写高性能网络服务器的必备技术之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2043&amp;amp;highlight=netty&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2043&amp;amp;highlight=netty&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;why-nettyjdk-原生-nio-程序的问题&quot;&gt;Why Netty?JDK 原生 NIO 程序的问题&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;JDK 原生也有一套网络应用程序 API，但是存在一系列问题，主要如下：
    &lt;ol&gt;
      &lt;li&gt;NIO 的类库和 API 繁杂，使用麻烦：你需要熟练掌握 Selector、ServerSocketChannel、SocketChannel、ByteBuffer 等。&lt;/li&gt;
      &lt;li&gt;需要具备其他的额外技能做铺垫：例如熟悉 Java 多线程编程，因为 NIO 编程涉及到 Reactor 模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的 NIO 程序。&lt;/li&gt;
      &lt;li&gt;可靠性能力补齐，开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等。NIO 编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大。&lt;/li&gt;
      &lt;li&gt;JDK NIO 的 Bug：例如臭名昭著的 Epoll Bug，它会导致 Selector 空轮询，最终导致 CPU 100%。官方声称在 JDK 1.6 版本的 update 18 修复了该问题，但是直到 JDK 1.7 版本该问题仍旧存在，只不过该 Bug 发生概率降低了一些而已，它并没有被根本解决。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;java-nio-epoll-bug-以及-netty-的解决之道&quot;&gt;Java NIO epoll bug 以及 Netty 的解决之道&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;epoll 空轮询导致 CPU 利用率 100% &lt;a href=&quot;http://songkun.me/2019/07/26/2019-07-26-java-nio-epoll-bug-and-netty-solution/&quot;&gt;http://songkun.me/2019/07/26/2019-07-26-java-nio-epoll-bug-and-netty-solution/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;netty中的epoll实现&quot;&gt;netty中的epoll实现&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在java中，IO多路复用的功能通过nio中的Selector提供，在不同的操作系统下jdk会通过spi的方式加载不同的实现，
比如在macos下是KQueueSelectorProvider，KQueueSelectorProvider底层使用了kqueue来进行IO多路复用；
在linux 2.6以后的版本则是EPollSelectorProvider，EPollSelectorProvider底层使用的是epoll。
虽然jdk自身提供了selector的epoll实现，netty仍实现了自己的epoll版本，根据netty开发者在StackOverflow的回答，主要原因有两个：
    &lt;ul&gt;
      &lt;li&gt;支持更多socket option，比如TCP_CORK和SO_REUSEPORT&lt;/li&gt;
      &lt;li&gt;使用了边缘触发（ET）模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5d46ce64f265da03e05af722&quot;&gt;https://juejin.im/post/5d46ce64f265da03e05af722&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ET和LT的区别在于触发事件的条件不同，LT比较符合编程思维（有满足条件的就触发），ET触发的条件更苛刻一些（仅在发生变化时才触发），对使用者的要求也更高，理论效率更高&lt;/li&gt;
  &lt;li&gt;边缘触发和水平触发&lt;a href=&quot;https://juejin.im/post/5cdaa67f518825691b4a5cc0&quot;&gt;https://juejin.im/post/5cdaa67f518825691b4a5cc0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 18 May 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/18/Netty-Mina.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/18/Netty-Mina.html</guid>
        
        <category>网络编程</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Java SPI </title>
        <description>&lt;p&gt;SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。
Java SPI其实内部实现原理还是基于ClassLoader。我们可以自定义ClassLoader，结合SPI技术，就能做到接口和具体实现解耦，还能做到类隔离和对业务代码无感知的升级。
在jar包内 /META-INF/services/java.sql.Driver寻找类名（约束优于配置）。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;META-INF/services/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/sweatOtt/article/details/83055191&quot;&gt;https://blog.csdn.net/sweatOtt/article/details/83055191&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5af952fdf265da0b9e652de3&quot;&gt;https://juejin.im/post/5af952fdf265da0b9e652de3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/46b42f7f593c&quot;&gt;https://www.jianshu.com/p/46b42f7f593c&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/01/Java-SPI.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/01/Java-SPI.html</guid>
        
        <category>SPI</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Dubbo </title>
        <description>&lt;h3 id=&quot;dubbo&quot;&gt;Dubbo&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;官网 &lt;a href=&quot;http://dubbo.apache.org/&quot;&gt;http://dubbo.apache.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;start &lt;a href=&quot;http://start.dubbo.io/&quot;&gt;http://start.dubbo.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dubbo实践 &lt;a href=&quot;https://www.cnblogs.com/warehouse/tag/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/&quot;&gt;https://www.cnblogs.com/warehouse/tag/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;通俗易懂的 Dubbo 教程 &lt;a href=&quot;https://blog.csdn.net/Geffin/category_9931110.html&quot;&gt;https://blog.csdn.net/Geffin/category_9931110.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Java RMI &amp;amp; Dubbo &lt;a href=&quot;http://dubbo.apache.org/zh-cn/blog/dubbo-101.html&quot;&gt;http://dubbo.apache.org/zh-cn/blog/dubbo-101.html&lt;/a&gt;
    &lt;h3 id=&quot;dubbo负载均衡&quot;&gt;Dubbo负载均衡&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html&quot;&gt;http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;dubbo-内置了四种负载均衡策略分别如下&quot;&gt;Dubbo 内置了四种负载均衡策略，分别如下：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;RandomLoadBalance：随机负载均衡&lt;/li&gt;
  &lt;li&gt;RoundRobinLoadBalance：轮询负载均衡&lt;/li&gt;
  &lt;li&gt;LeastActiveLoadBalance：最少活跃调用数负载均衡&lt;/li&gt;
  &lt;li&gt;ConsistentHashLoadBalance：一致性哈希负载均衡&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;随机负载均衡&quot;&gt;随机负载均衡&lt;/h4&gt;
&lt;p&gt;随机负载均衡是 Dubbo 默认的负载均衡策略，顾名思义，就是从多个服务提供者中随机选择一个。
需要注意的是，Dubbo 的随机负载均衡并非是完全的随机，它有一个权重的概念，会按照权重来设置随机概率，举个例子，我们现在有两个服务提供者，一个的权重是100，另一个的权重是300，那么前者被分配的概率就为 25%，后者被分配的概率为 75%。
我们可以对服务提供者设置不同的权重，例如对性能较好的机器设置大权重，对差一点的机器设置小一点的权重。&lt;/p&gt;

&lt;h4 id=&quot;轮询负载均衡&quot;&gt;轮询负载均衡&lt;/h4&gt;
&lt;p&gt;轮询负载均衡，即会轮询每一个服务提供者，依次对其进行调用。
轮询负载均衡也有权重的概念，可以严格按照我们设置的比例进行分配，这个是该算法的优点，不过，该算法的缺点也很明显，可能会存在较慢的机器，那么请求会在这台机器上进行累积，很容易导致整个系统变慢。&lt;/p&gt;

&lt;h4 id=&quot;最少活跃调用数负载均衡&quot;&gt;最少活跃调用数负载均衡&lt;/h4&gt;
&lt;p&gt;最少活跃调用数负载均衡会将请求转发至活跃调用数最少的机器上，如果有两台机器活跃数相同，会采取随机负载均衡的策略。
什么是活跃调用数呢？每个服务维护一个活跃数计数器，该计数器存放机器未处理完的请求。当有请求产生时，会选择活跃数最小的机器去执行。
最少活跃调用数负载均衡可以令慢的机器收到更少的请求。&lt;/p&gt;

&lt;h4 id=&quot;一致性哈希负载均衡&quot;&gt;一致性哈希负载均衡&lt;/h4&gt;
&lt;p&gt;要了解这种负载均衡策略，我们首先得学习一下一致性哈希算法。不会一致性哈希算法的同学可以看一下我之前写的这篇博客，质量保证过硬：一致性哈希算法详解
一致性哈希可以保证相同参数的请求一定会发送到同一台机器上，即使有机器崩溃，由于一致性哈希算法的特性与虚拟节点的存在，发往该机器的请求会被发送到其它机器上，并不会引发剧烈变动。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChangeServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChangeService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Reference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadbalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;roundrobin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;NameService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dubbo集群容错&quot;&gt;Dubbo集群容错&lt;/h3&gt;
&lt;h4 id=&quot;内置容错策略&quot;&gt;内置容错策略&lt;/h4&gt;
&lt;p&gt;Dubbo默认内置了一些容错策略，如果还不能满足用户需求，我们可以自定义容错策略进行配置。Dubbo 内置了以下几种容错策略：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Failover(失败自动切换)&lt;/li&gt;
  &lt;li&gt;Failsafe(失败安全)&lt;/li&gt;
  &lt;li&gt;Failfast(快速失败)&lt;/li&gt;
  &lt;li&gt;Failback(失败自动恢复)&lt;/li&gt;
  &lt;li&gt;Forking(并行调用)&lt;/li&gt;
  &lt;li&gt;Broadcast(广播调用)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;failover失败自动切换&quot;&gt;Failover(失败自动切换)&lt;/h4&gt;
&lt;p&gt;Failover 是 Dubbo 默认的容错策略。
其实，Failover 是高可用的一个常用概念，服务器通常拥有主备两套机器配置，当主服务器出现故障时，会自动切换到备服务器中，从而保证了整体的高可用性。
当调用失败时，会根据配置的重试次数，自动从其他可用地址中重新选择一个可用的地址进行调用，直到调用成功，或者是达到重试的上限位置。
Failover 会自动对失败进行重试，但它也带来了一些副作用。首先，重试会增加开销，再者，重试会增加调用的响应时间，最后，在某些情况下，重试会造成资源的浪费。&lt;/p&gt;

&lt;h4 id=&quot;failsafe失败安全&quot;&gt;Failsafe(失败安全)&lt;/h4&gt;
&lt;p&gt;Failsafe 在调用失败时，会忽略此错误，并记录一条日志，同时返回一个空结果，在上游看来调用是成功的。
Failsafe 即使失败了也不会影响整个调用流程，它的失败不影响核心业务的正确性，通常用于旁路系统或流程中，一般用于写入审计日志等操作。&lt;/p&gt;

&lt;h4 id=&quot;failfast快速失败&quot;&gt;Failfast(快速失败)&lt;/h4&gt;
&lt;p&gt;有一些业务场景中，其操作是非幂等的，不能重复调用。这种情况下，重试并不是一个好办法，需要用到 Failfast，调用失败立即报错，让调用方来决定下一步的操作并保证业务的幂等性。&lt;/p&gt;

&lt;h4 id=&quot;failback失败自动恢复&quot;&gt;Failback(失败自动恢复)&lt;/h4&gt;
&lt;p&gt;在 Failback 中，如果调用失败，则此次失败相当于 Failsafe，将返回一个空结果，但与 Failsafe 不同的是，Failback 策略会将这次调用加入内存中的失败列表中，对于这个列表中的失败调用，会在另一个线程中进行异步重试，重试如果再发生失败，则会忽略，即使重试调用成功，原来的调用方也感知不到了。因此它通常适合于对于实时性要求不高，且不需要返回值的一些异步操作。&lt;/p&gt;

&lt;h4 id=&quot;forking并行调用&quot;&gt;Forking(并行调用)&lt;/h4&gt;
&lt;p&gt;Forking 在第一次调用就同时发起多个调用，只要其中一个调用成功，就认为成功。在资源充足，且对于失败的容忍度较低的场景下，可以采用此策略。&lt;/p&gt;

&lt;h4 id=&quot;broadcast广播调用&quot;&gt;Broadcast(广播调用)&lt;/h4&gt;
&lt;p&gt;在某些场景下，我们可能需要对所有服务提供者进行操作，我们可以采用广播调用策略，会逐个调用所有提供者，只要任意有一个提供者出错，则认为此次调用出错。通常用于通知所有提供者更新缓存或日志等本地资源信息。&lt;/p&gt;

&lt;h4 id=&quot;降级容错熔断方式&quot;&gt;降级容错熔断方式&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Dubbo服务之Stub和Mock &lt;a href=&quot;https://www.jianshu.com/p/f4255a14e53f&quot;&gt;https://www.jianshu.com/p/f4255a14e53f&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dubbo服务之RPC扩展和本地Mock &lt;a href=&quot;https://www.cnblogs.com/hyry/p/12067497.html&quot;&gt;https://www.cnblogs.com/hyry/p/12067497.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dubbo与断路器 Hystrix 的集成 &lt;a href=&quot;https://blog.csdn.net/Geffin/article/details/105808745&quot;&gt;https://blog.csdn.net/Geffin/article/details/105808745&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dubbo27新特性&quot;&gt;Dubbo2.7新特性&lt;/h4&gt;
&lt;p&gt;异步化改造，三大中心改造，服务治理增强 &lt;a href=&quot;http://dubbo.apache.org/zh-cn/blog/dubbo-27-features.html&quot;&gt;http://dubbo.apache.org/zh-cn/blog/dubbo-27-features.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;通过qos对服务进行动态控制&quot;&gt;通过QoS对服务进行动态控制&lt;/h4&gt;
&lt;p&gt;在Dubbo中，QoS这个概念被用于动态的对服务进行查询和控制。例如对获取当前提供和消费的所有服务，以及对服务进行动态的上下线，即从注册中心上进行注册和反注册操作。
&lt;a href=&quot;http://dubbo.apache.org/zh-cn/blog/introduction-to-dubbo-qos.html&quot;&gt;http://dubbo.apache.org/zh-cn/blog/introduction-to-dubbo-qos.html&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 May 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/01/Dubbo.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/05/01/Dubbo.html</guid>
        
        <category>微服务</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> SpringCloud </title>
        <description>&lt;h3 id=&quot;关于微服务&quot;&gt;关于微服务&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SOA(ESB)与微服务
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30477325&quot;&gt;https://zhuanlan.zhihu.com/p/30477325&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/guanghe/p/10978349.html&quot;&gt;https://www.cnblogs.com/guanghe/p/10978349.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/9YxdCkl98kZq_Bh_DqwCmA&quot;&gt;https://mp.weixin.qq.com/s/9YxdCkl98kZq_Bh_DqwCmA&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;微服务哪些事
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://windmt.com/2018/04/14/spring-cloud-0-microservices/&quot;&gt;https://windmt.com/2018/04/14/spring-cloud-0-microservices/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://windmt.com/2018/04/14/spring-cloud-1-services-governance/&quot;&gt;https://windmt.com/2018/04/14/spring-cloud-1-services-governance/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SpringCloud &amp;amp; Dubbo
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qDiSn29uqSpA0yaM07nmbQ&quot;&gt;https://mp.weixin.qq.com/s/qDiSn29uqSpA0yaM07nmbQ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/GSLXRnl0pg5ynVwbQcon7A&quot;&gt;https://mp.weixin.qq.com/s/GSLXRnl0pg5ynVwbQcon7A&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.ityouknow.com/springcloud/2017/11/20/dubbo-update-again.html&quot;&gt;阿里Dubbo与Spring Cloud&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RPC之thrift/gRPC
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/kesonyk/article/details/50924489&quot;&gt;https://blog.csdn.net/kesonyk/article/details/50924489&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.51cto.com/art/201908/601617.htm&quot;&gt;https://developer.51cto.com/art/201908/601617.htm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011478469&quot;&gt;https://segmentfault.com/a/1190000011478469&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/136112210&quot;&gt;https://zhuanlan.zhihu.com/p/136112210&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;RPC与HTTP的关系 &lt;a href=&quot;https://mp.weixin.qq.com/s/0RXTUWHXDmMddsPVWej2Qg&quot;&gt;https://mp.weixin.qq.com/s/0RXTUWHXDmMddsPVWej2Qg&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;快速理解RPC技术——基本概念、原理和用途 &lt;a href=&quot;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2620&quot;&gt;http://www.52im.net/forum.php?mod=viewthread&amp;amp;tid=2620&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebService某种程度上也是一种RPC
    &lt;ul&gt;
      &lt;li&gt;WebService的历史 &lt;a href=&quot;https://www.iteye.com/blog/andot-662787&quot;&gt;https://www.iteye.com/blog/andot-662787&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;WebService的demo&lt;a href=&quot;https://blog.csdn.net/weixin_42672054/article/details/81708464&quot;&gt;https://blog.csdn.net/weixin_42672054/article/details/81708464&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2000年左右出现xml，借此微软等联盟推出了基于XML的SOAP协议，实现各系统之间的通信&lt;/li&gt;
      &lt;li&gt;thrift/webservice等可以生成客户端代码，隐藏了底层通信细节，对象化了数据（否则需要自行解析）&lt;/li&gt;
      &lt;li&gt;thrift、dobbo等方式基于TCP实现，主要是性能方面的考虑吧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;hessian / sofa&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;just-do-springcloud&quot;&gt;Just Do SpringCloud&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;首选 &lt;a href=&quot;https://windmt.com/tags/Spring-Cloud/&quot;&gt;https://windmt.com/tags/Spring-Cloud/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.springcloud.cc/&quot;&gt;springcloud.cc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://springcloud.fun&quot;&gt;springcloud.fun&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/283286745/answer/763040709&quot;&gt;大话SpringCloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geekdigging.com&quot;&gt;https://www.geekdigging.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常见组件&quot;&gt;常见组件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;服务配置中心（注册发现）：Netflix的Eureka、Apache的zookeeper、Spring家族的Spring Cloud Consul、携程apollo
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/5c5753d2aeb0&quot;&gt;Zookeeper保证的是CP，Eureka保证的是AP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;客户端负载均衡：Netflix Ribbon (提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。)
    &lt;ul&gt;
      &lt;li&gt;客户端负载均衡(Ribbon)服务实例的清单在客户端，客户端进行负载均衡算法分配。(从上面的知识我们已经知道了：客户端可以从Eureka Server中得到一份服务清单，在发送请求时通过负载均衡算法，在多个服务器之间选择一个进行访问)
Zuul路由的业务，对业务进行了归类，并交给了对应的微服务。&lt;/li&gt;
      &lt;li&gt;服务端负载均衡(Nginx)服务实例的清单在服务端，服务器进行负载均衡算法分配,
Nginx路由请求的压力，对请求进行平均后，交给了服务器处理。&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/kongxianghai/p/8477781.html&quot;&gt;撸一撸Spring Cloud Ribbon的原理-负载均衡策略&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;可以使用Ribbon + resetTemplate 或者直接使用 Feign（已经内置Ribbon）来实现客户端侧的负载均衡&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;熔断器：Netflix Hystrix（Envoy)&lt;/li&gt;
  &lt;li&gt;Spring Cloud Feign：它基于 Netflix Feign 实现，整合了 Spring Cloud Ribbon 与 Spring Cloud Hystrix, 除了整合这两者的强大功能之外，它还提 供了声明式的服务调用(不再通过RestTemplate)。
  生产环境一般使用restTemplate + ribbon&lt;/li&gt;
  &lt;li&gt;服务网关: Netflix Zuul  、 Spring Cloud GateWay
    &lt;ul&gt;
      &lt;li&gt;Zuul相当于一个分布式的大Servlet+Filter入口可进行路由及过滤等&lt;/li&gt;
      &lt;li&gt;Zuul也可以近似的理解为是SOA里的ESB，统一入口调用&lt;/li&gt;
      &lt;li&gt;Zuul也默认集成了Hystrix与Ribbon&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式配置：Spring Cloud Config (Chef)&lt;/li&gt;
  &lt;li&gt;时间消息总线：Spring Cloud Bus&lt;/li&gt;
  &lt;li&gt;链路追踪：Spring Cloud Sleuth 与 Twitter Zipkin&lt;/li&gt;
  &lt;li&gt;数据流：Spring Cloud Stream (数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。)&lt;/li&gt;
  &lt;li&gt;服务监控：Zabbix、Nagios、Metrics、Spectator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;相关组件&quot;&gt;相关组件&lt;/h3&gt;
&lt;h4 id=&quot;zookeeper&quot;&gt;zookeeper&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;简单理解，zk就是一套简单的文件系统结构，本目录(节点)可以设置value及subNode,
并且该节点可以设置不同的权限（默认/用户名+密码/ip/秘钥，这4种)&lt;/li&gt;
  &lt;li&gt;zk集群简单理解就是，基于ZAB一致性算法的变种keep alived集群&lt;/li&gt;
  &lt;li&gt;zk集群是CP模型，强一致性的，也就是说数据出现了不一致性（通常是节点挂了），整个服务集群就会Hold住等待数据一致，
所以，这个缺点导致zk并不是最佳的注册中心，因为服务注册中心AP模型最好，部分服务有问题并不表示所有服务不可用。&lt;/li&gt;
  &lt;li&gt;zookeeper 命令 &lt;a href=&quot;https://blog.csdn.net/feixiang2039/article/details/79810102&quot;&gt;https://blog.csdn.net/feixiang2039/article/details/79810102&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Curator实现的zk分布式锁 &lt;a href=&quot;https://www.sohu.com/a/341386202_315839&quot;&gt;https://www.sohu.com/a/341386202_315839&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基于springcloud的开源项目&quot;&gt;基于SpringCloud的开源项目&lt;/h3&gt;

</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/SpringCloud.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/SpringCloud.html</guid>
        
        <category>微服务</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Nginx </title>
        <description>&lt;h4 id=&quot;location-优先级从高到低&quot;&gt;location 优先级从高到低&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 精准匹配&lt;/span&gt;
2. location ^~   &lt;span class=&quot;c&quot;&gt;# 带参前缀匹配&lt;/span&gt;
3. location ~    &lt;span class=&quot;c&quot;&gt;# 正则匹配（区分大小写）&lt;/span&gt;
4. location ~&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 正则匹配（不区分大小写）&lt;/span&gt;
5. location /a   &lt;span class=&quot;c&quot;&gt;# 普通前缀匹配，优先级低于带参数前缀匹配。&lt;/span&gt;
6. location /    &lt;span class=&quot;c&quot;&gt;# 任何没有匹配成功的，都会匹配这里处理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;location-示例&quot;&gt;location 示例&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
location  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 只精准匹配 / 的查询.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration A &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 匹配成功： / &lt;/span&gt;

location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 匹配任何请求，因为所有请求都是以”/“开始&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 但是更长字符匹配或者正则表达式匹配会优先匹配&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration B &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#匹配成功：/index.html&lt;/span&gt;

location /documents &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索/&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 只有后面的正则表达式没有匹配到时，这一条才会采用这一条/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration C &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 匹配成功：/documents/document.html&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 匹配成功：/documents/abc&lt;/span&gt;

location ~ /documents/ABC &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 区分大小写的正则匹配&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索/&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 只有后面的正则表达式没有匹配到时，这一条才会采用这一条/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration CC &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

location ^~ /images/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 匹配任何以 /images/ 开头的地址，匹配符合以后，立即停止往下搜索正则，采用这一条。/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration D &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 成功匹配：/images/a.gif&lt;/span&gt;

location ~&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gif|jpg|jpeg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 匹配所有以 .gif、.jpg 或 .jpeg 结尾的请求，不区分大小写&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 然而，所有请求 /images/ 下的图片会被 [ config D ]  处理，因为 ^~ 到达不了这一条正则/&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration E &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 成功匹配：/documents/a.jpg&lt;/span&gt;

location /images/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 字符匹配到 /images/，继续往下，会发现 ^~ 存在/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration F &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

location /images/abc &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在/&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# F与G的放置顺序是没有关系的/&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration G &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

location ~ /images/abc/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 只有去掉 [ config D ] 才有效：先最长匹配 [ config G ] 开头的地址，继续往下搜索，匹配到这一条正则，采用/&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; configuration H &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;命名-location&quot;&gt;命名 location&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/ @custom
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
location @custom &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...do something&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;全局变量&quot;&gt;全局变量&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$args&lt;/span&gt; ： &lt;span class=&quot;c&quot;&gt;#这个变量等于请求行中的参数，同$query_string&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$content_length&lt;/span&gt; ： 请求头中的Content-length字段。
&lt;span class=&quot;nv&quot;&gt;$content_type&lt;/span&gt; ： 请求头中的Content-Type字段。
&lt;span class=&quot;nv&quot;&gt;$document_root&lt;/span&gt; ： 当前请求在root指令中指定的值。
&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; ： 请求主机头字段，否则为服务器名称。
&lt;span class=&quot;nv&quot;&gt;$http_user_agent&lt;/span&gt; ： 客户端agent信息
&lt;span class=&quot;nv&quot;&gt;$http_cookie&lt;/span&gt; ： 客户端cookie信息
&lt;span class=&quot;nv&quot;&gt;$limit_rate&lt;/span&gt; ： 这个变量可以限制连接速率。
&lt;span class=&quot;nv&quot;&gt;$request_method&lt;/span&gt; ： 客户端请求的动作，通常为GET或POST。
&lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt; ： 客户端的IP地址。
&lt;span class=&quot;nv&quot;&gt;$remote_port&lt;/span&gt; ： 客户端的端口。
&lt;span class=&quot;nv&quot;&gt;$remote_user&lt;/span&gt; ： 已经经过Auth Basic Module验证的用户名。
&lt;span class=&quot;nv&quot;&gt;$request_filename&lt;/span&gt; ： 当前请求的文件路径，由root或alias指令与URI请求生成。
&lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt; ： HTTP方法（如http，https）。
&lt;span class=&quot;nv&quot;&gt;$server_protocol&lt;/span&gt; ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
&lt;span class=&quot;nv&quot;&gt;$server_addr&lt;/span&gt; ： 服务器地址，在完成一次系统调用后可以确定这个值。
&lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt; ： 服务器名称。
&lt;span class=&quot;nv&quot;&gt;$server_port&lt;/span&gt; ： 请求到达服务器的端口号。
&lt;span class=&quot;nv&quot;&gt;$request_uri&lt;/span&gt; ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;baz”。
&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; ： 不带请求参数的当前URI，&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;不包含主机名，如”/foo/bar.html”。
&lt;span class=&quot;nv&quot;&gt;$document_uri&lt;/span&gt; ： 与&lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;相同。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;rewrite规则&quot;&gt;Rewrite规则&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 http://seanlook.com/a/we/index.php?id=1&amp;amp;u=str 只对/a/we/index.php重写。语法rewrite regex replacement [flag];&lt;/li&gt;
  &lt;li&gt;如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。&lt;/li&gt;
  &lt;li&gt;表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：
    &lt;ul&gt;
      &lt;li&gt;执行server块的rewrite指令&lt;/li&gt;
      &lt;li&gt;执行location匹配&lt;/li&gt;
      &lt;li&gt;执行选定的location中的rewrite指令&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;执行搜索
这个规则的目的是为了执行搜索，搜索URL中包含的关键字。
请求的URL //hqidi.com/search/some-search-keywords
重写后URL //hqidi.com/search.php?p&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some-search-keywords
重写规则         rewrite ^/search/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/search.php?p&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;?&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

用户个人资料页面
大多数运行访问者注册的动态网站都提供一个可以查看个人资料的页面，这个页面的URL包含用户的UID和用户名
请求的URL //hqidi.com/user/47/dige
重写后URL //hqidi.com/user.php?id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;47&amp;amp;name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dige
重写规则         rewrite ^/user/&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;0-9]+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/user.php?id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&amp;amp;name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;?&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

多个参数
有些网站对字符串参数使用不同的语法，例如 通过斜线“/”来分隔非命名参数
请求的URL //hqidi.com/index.php/param1/param2/param3
重写后URL //hqidi.com/index.php?p1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;param1&amp;amp;p2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;param2&amp;amp;p3&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;param3
重写规则         rewrite ^/index.php/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/index.php?p1&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&amp;amp;p2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&amp;amp;p3&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;?&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;参考&quot;&gt;参考&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;location 配置一 &lt;a href=&quot;https://segmentfault.com/a/1190000022315733&quot;&gt;https://segmentfault.com/a/1190000022315733&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;location 配置二 &lt;a href=&quot;https://segmentfault.com/a/1190000022407797&quot;&gt;https://segmentfault.com/a/1190000022407797&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Nginx 架构原理科普 &lt;a href=&quot;https://mp.weixin.qq.com/s/V09fS0fHq6KJJZ3c1AuEyQ&quot;&gt;https://mp.weixin.qq.com/s/V09fS0fHq6KJJZ3c1AuEyQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;OpenResty 概要及原理科普 &lt;a href=&quot;https://mp.weixin.qq.com/s/rhIXgxuL_w_GvOwGZPGDkw&quot;&gt;https://mp.weixin.qq.com/s/rhIXgxuL_w_GvOwGZPGDkw&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;微服务网关 Kong 科普 &lt;a href=&quot;https://mp.weixin.qq.com/s/P7DTKAf8w3DhJJ6ODlRf8g&quot;&gt;https://mp.weixin.qq.com/s/P7DTKAf8w3DhJJ6ODlRf8g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Nginx.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/Nginx.html</guid>
        
        <category>Nginx</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> Java ClassLoader </title>
        <description>&lt;h4 id=&quot;类加载器步骤&quot;&gt;类加载器步骤&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;在特定目录找到.class文件，并读取&lt;/li&gt;
  &lt;li&gt;Java是模板系语言，读取.class文件之后，被实例化为对应的Class的对象&lt;/li&gt;
  &lt;li&gt;Class对象=类模板实例化，只有有类模板，新对象才能根据类模板进行实例化&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3大内置类加载器&quot;&gt;3大内置类加载器&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;启动（Bootstrap）类加载器
启动类加载器主要加载的是JVM自身需要的类，这个类加载使用C++语言实现的，是虚拟机自身的一部分，它负责将 &lt;JAVA_HOME&gt;/lib路径下的核心类库或-Xbootclasspath参数指定的路径下的jar包加载到内存中，注意必由于虚拟机是按照文件名识别加载jar包的，如rt.jar，如果文件名不被虚拟机识别，即使把jar包丢到lib目录下也是没有作用的(出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类)。&lt;/JAVA_HOME&gt;&lt;/li&gt;
  &lt;li&gt;扩展（Extension）类加载器
扩展类加载器是指Sun公司(已被Oracle收购)实现的sun.misc.Launcher$ExtClassLoader类，由Java语言实现的，是Launcher的静态内部类，它负责加载&lt;JAVA_HOME&gt;/lib/ext目录下或者由系统变量-Djava.ext.dir指定位路径中的类库，开发者可以直接使用标准扩展类加载器。&lt;/JAVA_HOME&gt;&lt;/li&gt;
  &lt;li&gt;系统（System）类加载器
也称应用程序加载器是指 Sun公司实现的sun.misc.Launcher$AppClassLoader。它负责加载系统类路径java -classpath或-D java.class.path 指定路径下的类库，也就是我们经常用到的classpath路径，开发者可以直接使用系统类加载器，一般情况下该类加载是程序中默认的类加载器，通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;双亲委派模式&quot;&gt;双亲委派模式&lt;/h4&gt;
&lt;p&gt;工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式&lt;/p&gt;

&lt;h4 id=&quot;双亲委派模式优势&quot;&gt;双亲委派模式优势&lt;/h4&gt;
&lt;p&gt;采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。可能你会想，如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;不同的加载器加载了同个类，在Jvm中相当于两个不同的Class对象&lt;/li&gt;
  &lt;li&gt;双亲委派模型的破坏者-线程上下文类加载器，在Java应用中存在着很多服务提供者接口（Service Provider Interface，SPI），这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等，这些 SPI 的接口属于 Java 核心库，一般存在rt.jar包中，由Bootstrap类加载器加载，而 SPI 的第三方实现代码则是作为Java应用所依赖的 jar 包被存放在classpath路径下，由于SPI接口中的代码经常需要加载具体的第三方实现类并调用其相关方法，但SPI的核心接口类是由引导类加载器来加载的，而Bootstrap类加载器无法直接加载SPI的实现类，同时由于双亲委派模式的存在，Bootstrap类加载器也无法反向委托AppClassLoader加载器SPI的实现类。在这种情况下，我们就需要一种特殊的类加载器来加载第三方的类库，而线程上下文类加载器就是很好的选择。&lt;/li&gt;
  &lt;li&gt;参考&lt;a href=&quot;https://blog.csdn.net/javazejian/article/details/73413292&quot;&gt;https://blog.csdn.net/javazejian/article/details/73413292&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 04 Apr 2020 19:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/ClassLoader.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/04/04/ClassLoader.html</guid>
        
        <category>JVM</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> SpringBoot </title>
        <description>&lt;h4 id=&quot;spring-boot-是什么&quot;&gt;Spring Boot 是什么？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring 是一个“引擎”；&lt;/li&gt;
  &lt;li&gt;Spring MVC 是基于Spring的一个 MVC 框架；&lt;/li&gt;
  &lt;li&gt;Spring Boot 是基于Spring的条件注册的一套快速开发整合包。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;springboot启动原理-&quot;&gt;SpringBoot启动原理 ☆☆☆&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResourceLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resourceLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PrimarySources must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;primarySources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primarySources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 1. 推测ApplicationType&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webApplicationType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebApplicationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deduceFromClasspath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2. 根据spring.factories初始化ApplicationContextInitializer 与 ApplicationListener&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationContextInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 3. 推测 Main入口&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deduceMainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringBootExceptionReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureHeadlessProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SpringApplicationRunListeners&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRunListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 4. SpringApplicationRunListeners生命周期之started()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;starting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultApplicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 5. 准备环境 及 SpringApplicationRunListeners生命周期之environmentPrepared()&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;ConfigurableEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureIgnoreBeanInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;exceptionReporters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringBootExceptionReporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigurableApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 6. 初始化类加载器、bean产生器、资源加载器等，打印banner&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 7. 触发 @EnableAutoConfiguration 自动装配相关beans及configuration等&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//    SpringApplicationRunListeners生命周期之contextPrepared()/contextLoaded()&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refreshContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;afterRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStartupInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StartupInfoLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callRunners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// ... 省略代码&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;启动原理解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://tengj.top/2017/03/09/springboot3/&quot;&gt;http://tengj.top/2017/03/09/springboot3/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动装配之@ComponentScan详解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mapleleafforest/article/details/86623578&quot;&gt;https://blog.csdn.net/mapleleafforest/article/details/86623578&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动装配之@EnableAutoConfiguration详解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mapleleafforest/article/details/87273213&quot;&gt;https://blog.csdn.net/mapleleafforest/article/details/87273213&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot自动配置-&quot;&gt;SpringBoot自动配置 ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;SpringBoot项目配置注解@EnableAutoConfiguration后&lt;/li&gt;
  &lt;li&gt;SpringBoot启动扫描META-INF下的spring.factories&lt;/li&gt;
  &lt;li&gt;spring.factories子配置项org.springframework.boot.autoconfigure.EnableAutoConfiguration配置了所有可以自动配置的组件&lt;/li&gt;
  &lt;li&gt;各个XXXAutoConfiguration按照各自的ConditionalOnClass/OnBean等，判断是否加载XXX配置&lt;/li&gt;
  &lt;li&gt;根据XXX配置的@Import加载相关的其他类，之后通过反射机制初始化Bean&lt;/li&gt;
  &lt;li&gt;之后即可通过注入的方式使用
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 比如DataSourceAutoConfiguration的自动配置是检测到DataSource.class 与 EmbeddedDatabaseType.class存在&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// DataSource是javax包中自带，而EmbeddedDatabaseType存在于spring-boot-starter-jdbc中&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 因此在pom中引入spring-boot-starter-jdbc后，即可触发加载操作&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 接下来就是根据spring.datasource相关配置初始化PooledDataSource 或者 直接使用EmbeddedDatabase&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConditionalOnClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmbeddedDatabaseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataSourceProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataSourcePoolMetadataProvidersConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceInitializationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceAutoConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;DataSourceAutoConfiguration解析&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/kangsa998/article/details/90231518&quot;&gt;https://blog.csdn.net/kangsa998/article/details/90231518&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springboot的starter-&quot;&gt;SpringBoot的Starter ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;徒手撸一个SpringBoot中的Starter ，解密自动化配置黑魔法！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lenve/p/10892011.html&quot;&gt;https://www.cnblogs.com/lenve/p/10892011.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringBoot启动机制（starter机制）核心原理详解&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d166d935217b&quot;&gt;https://www.jianshu.com/p/d166d935217b&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个Spring boot stater&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/fdb574e1f77c&quot;&gt;https://www.jianshu.com/p/fdb574e1f77c&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot常用注解&quot;&gt;SpringBoot常用注解&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Conditional
@SpringBootConfiguration
@EnableAutoConfiguration
@SpringBootApplication
@Configuration：代表这个类是一个配置类。
@ComponentScan：用来扫描指定包下面的注解类。
@Import：用来导入其他的@Configuration配置类。
@ImportResource：用来导入xml配置文件，比如某些配置一定要xml配置。
@Bean：用来定义一个bean，可以指定初始、销毁方法，及bean范围等。
@Controller 标识一个类为控制器。
@RequestMapping URL的映射。
@ResponseBody 返回结果转换为JSON字符串。
@RequestBody 表示接收JSON格式字符串参数。
@RestController这个注解，而不是@Controller，不过这个注解同样不是Spring boot提供的，而是Spring MVC4中的提供的注解，表示一个支持Restful的控制器。
这个类中有三个URL映射是相同的，即都是/article/{id}，这在@Controller标识的类中是不允许出现的。这里的可以通过method来进行区分，produces的作用是表示返回结果的类型是JSON。
@PathVariable这个注解，也是Spring MVC提供的，其作用是表示该变量的值是从访问路径中获取。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;27个核心注解
&lt;a href=&quot;https://mp.weixin.qq.com/s/E2DyzV1cgUn1T5PfE92KSA&quot;&gt;https://mp.weixin.qq.com/s/E2DyzV1cgUn1T5PfE92KSA&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;springwebapplication-与-servlet&quot;&gt;SpringWebApplication 与 Servlet&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Servlet是JavaWeb的核心，可以理解为CGI的Java线程版本&lt;/li&gt;
  &lt;li&gt;SpringMVC核心用到DispatcherServlet，可以配置多个urlMapping&lt;/li&gt;
  &lt;li&gt;Struts2/SpringMVC是基于Servlet实现分发，而Struts1是基于Filter&lt;/li&gt;
  &lt;li&gt;一个SpringWebApplication可以定义多个Servlet，需要区分urlMapping&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;springboot-中的-tomcat-是如何启动的&quot;&gt;SpringBoot 中的 Tomcat 是如何启动的？&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qpLgkXOkccwCQbWoaEpqUQ&quot;&gt;https://mp.weixin.qq.com/s/qpLgkXOkccwCQbWoaEpqUQ&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springjdbc--mybatis--spring-data--jpa&quot;&gt;SpringJDBC / Mybatis / Spring Data / JPA&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Mybatis的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/12/03/springboot/chapter-thirty-five/&quot;&gt;https://blog.lqdev.cn/2018/12/03/springboot/chapter-thirty-five/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Mybatis-plus的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/07/21/springboot/chapter-nine/&quot;&gt;https://blog.lqdev.cn/2018/07/21/springboot/chapter-nine/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;spring-security--apache-shrio--jwt-javawebtoken&quot;&gt;Spring Security / Apache Shrio / JWT JavaWebToken&lt;/h4&gt;

&lt;h4 id=&quot;springboot-打出来的war中的webxml消失了&quot;&gt;SpringBoot 打出来的war中的web.xml消失了&lt;/h4&gt;
&lt;p&gt;springboot 是如何帮我们省去web.xml配置的&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/3c94d7e76998?utm_source=oschina-app&quot;&gt;https://www.jianshu.com/p/3c94d7e76998?utm_source=oschina-app&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;webmvcconfigureradapter-与-webmvcconfigurationsupport&quot;&gt;WebMvcConfigurerAdapter 与 WebMvcConfigurationSupport&lt;/h4&gt;
&lt;p&gt;(遇到的一个坑查了半天)
&lt;a href=&quot;https://blog.csdn.net/innovationad/article/details/79959383&quot;&gt;https://blog.csdn.net/innovationad/article/details/79959383&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot之actuator&quot;&gt;SpringBoot之Actuator&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot Actuator:健康检查、审计、统计和监控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/d5943e303a1f&quot;&gt;https://www.jianshu.com/p/d5943e303a1f&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;监控管理之Spring Boot Admin使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/09/14/springboot/chapter-twenty-eight/&quot;&gt;https://blog.lqdev.cn/2018/09/14/springboot/chapter-twenty-eight/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot日志管理之aop统一日志&quot;&gt;SpringBoot日志管理之AOP统一日志&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/24/springboot/chapter-twenty-four/&quot;&gt;https://blog.lqdev.cn/2018/08/24/springboot/chapter-twenty-four/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot日志管理之追加统一traceid&quot;&gt;SpringBoot日志管理之追加统一traceId&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.ModelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.servlet.handler.HandlerInterceptorAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogTraceInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RandomHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateNonceNumStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xhs&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${LOG_HOME}/app.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileNamePattern&amp;gt;&lt;/span&gt;${LOG_HOME}/app.%d{yyyy-MM-dd}.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileNamePattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxHistory&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxHistory&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{HH:mm:ss.SSS} %X{traceId} [%thread] %-5level %c{10} - %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;charset&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/charset&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;springboot--dubbo&quot;&gt;SpringBoot &amp;amp; Dubbo&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/09/28/springboot/chapter-twenty-nine/&quot;&gt;https://blog.lqdev.cn/2018/09/28/springboot/chapter-twenty-nine/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot-异步的各种实现&quot;&gt;SpringBoot 异步的各种实现&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;异步开发之异步请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/16/springboot/chapter-twenty/&quot;&gt;https://blog.lqdev.cn/2018/08/16/springboot/chapter-twenty/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;异步开发之异步调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/08/17/springboot/chapter-twenty-one/&quot;&gt;https://blog.lqdev.cn/2018/08/17/springboot/chapter-twenty-one/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wjc9ImJfxcYpyAKEw-3AgA&quot;&gt;https://mp.weixin.qq.com/s/wjc9ImJfxcYpyAKEw-3AgA&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;事件的发布和监听&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/06/springboot/chapter-thirty-two/&quot;&gt;https://blog.lqdev.cn/2018/11/06/springboot/chapter-thirty-two/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RabbitMQ的集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/07/24/springboot/chapter-twelve/&quot;&gt;https://blog.lqdev.cn/2018/07/24/springboot/chapter-twelve/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2019/07/21/springboot/chapter-thirty-eight/&quot;&gt;https://blog.lqdev.cn/2019/07/21/springboot/chapter-thirty-eight/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;springboot--webservice&quot;&gt;SpringBoot &amp;amp; WebService&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Spring web Servcies集成和使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/09/springboot/chapter-thirty-three/&quot;&gt;https://blog.lqdev.cn/2018/11/09/springboot/chapter-thirty-three/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CXF构建WebService服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.lqdev.cn/2018/11/12/springboot/chapter-thirty-four/&quot;&gt;https://blog.lqdev.cn/2018/11/12/springboot/chapter-thirty-four/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ltw-in-jdk-or-springboot&quot;&gt;LTW In Jdk Or SpringBoot&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/takumicx/p/10150344.html&quot;&gt;https://www.cnblogs.com/takumicx/p/10150344.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;集成框架spring-integration-mule-esb-or-apache-camel比较&quot;&gt;集成框架Spring Integration, Mule ESB or Apache Camel比较&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jdon.com/soa/integration-framework-comparison-spring.html&quot;&gt;https://www.jdon.com/soa/integration-framework-comparison-spring.html&lt;/a&gt;
&lt;a href=&quot;https://www.jianshu.com/p/68aba8d09a89&quot;&gt;https://www.jianshu.com/p/68aba8d09a89&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/Spring.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/Spring.html</guid>
        
        <category>Java</category>
        
        <category>Spring</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title> JVM 常用工具 </title>
        <description>&lt;h4 id=&quot;jmap--内存占用情况查询&quot;&gt;jmap : 内存占用情况查询&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 查询某个pid进程对应的应用程序内存占用情况&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; pid
 
&lt;span class=&quot;c&quot;&gt;## 示例1&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; 5940

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@VM_0_8_centos ~]# jmap &lt;span class=&quot;nt&quot;&gt;-heap&lt;/span&gt; 27472
Attaching to process ID 27472, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.171-b11

using thread-local object allocation.
Parallel GC with 2 thread&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Heap Configuration:
   MinHeapFreeRatio         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
   MaxHeapFreeRatio         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100
   MaxHeapSize              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2051014656 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1956.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   NewSize                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 42991616 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   MaxNewSize               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 683671552 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;652.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   OldSize                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 87031808 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;83.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   NewRatio                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
   SurvivorRatio            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8
   MetaspaceSize            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 21807104 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20.796875MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   CompressedClassSpaceSize &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1073741824 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1024.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   MaxMetaspaceSize         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 17592186044415 MB
   G1HeapRegionSize         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Heap Usage:
PS Young Generation
Eden Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 37224448 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;35.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 14139096 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;13.484092712402344MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 23085352 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;22.015907287597656MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   37.98335975324604% used
From Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3145728 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2929584 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.7938690185546875MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 216144 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.2061309814453125MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   93.12896728515625% used
To Space:
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3670016 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.0MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3670016 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   0.0% used
PS Old Generation
   capacity &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 165150720 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;157.5MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   used     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 98856376 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;94.27678680419922MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   free     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 66294344 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;63.22321319580078MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   59.8582773359995% used

26452 interned Strings occupying 2659208 bytes.

&lt;span class=&quot;c&quot;&gt;## 示例2&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-histo&lt;/span&gt; 16464 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 16464.log
&lt;span class=&quot;nt&quot;&gt;-histo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;”. 如果live子参数加上后,只统计活的对象数量. 

&lt;span class=&quot;c&quot;&gt;## 示例2&lt;/span&gt;
jmap &lt;span class=&quot;nt&quot;&gt;-dump&lt;/span&gt;:format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;b,file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;outfile 3024可以将3024进程的内存heap输出出来到outfile文件里，再配合MAT（内存分析工具）。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jstat-可以实时监测系统资源占用与jvm运行情况&quot;&gt;jstat: 可以实时监测系统资源占用与jvm运行情况&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 命令语法结构：
Usage: jstat -help|-options
       jstat -&amp;lt;option&amp;gt; [-t] [-h&amp;lt;lines&amp;gt;] &amp;lt;vmid&amp;gt; [&amp;lt;interval&amp;gt; [&amp;lt;count&amp;gt;]]
## 参数解释：
Options — 选项，我们一般使用 -gcutil 查看gc情况
-t      — 输出Timestamp
vmid    — VM的进程号，即当前运行的java进程号
interval– 间隔时间，单位为秒或者毫秒
count   — 打印次数，如果缺省则打印无数次
 
S0  — Heap上的 Survivor space 0 区已使用空间的百分比
S1  — Heap上的 Survivor space 1 区已使用空间的百分比
E   — Heap上的 Eden space 区已使用空间的百分比
O   — Heap上的 Old space 区已使用空间的百分比
P   — Perm space 区已使用空间的百分比
YGC — 从应用程序启动到采样时发生 Young GC 的次数
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
FGC — 从应用程序启动到采样时发生 Full GC 的次数
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)

## jstat -options
    -class 类加载统计
    -compiler 编译统计 
    -gc
    -gccapacity
    -gccause Allocation Failure
    -gcmetacapacity 元数据空间统计
    -gcnew
    -gcnewcapacity
    -gcold
    -gcoldcapacity
    -gcutil 总结垃圾回收统计
    -printcompilation JVM编译方法统计

## 示例1 总结垃圾回收统计
[root@VM_0_8_centos ~]# jstat -gcutil 27472 1000 5
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
 78.04   0.00  14.10  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  24.05  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  34.14  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  40.62  61.31  96.88  94.27    288    5.612     4    3.335    8.947
 78.04   0.00  47.20  61.31  96.88  94.27    288    5.612     4    3.335    8.947

## 示例2 类加载统计
[root@VM_0_8_centos ~]# jstat -class -t 27472 1000 5
Timestamp       加载class的数量  所占用空间大小  未加载数量  未加载占用空间     Time(秒)
Timestamp       Loaded  Bytes  Unloaded  Bytes     Time
         5359.3  10847 20148.1        0     0.0      46.25
         5360.4  10847 20148.1        0     0.0      46.25
         5361.4  10847 20148.1        0     0.0      46.25
         5362.3  10847 20148.1        0     0.0      46.25
         5363.3  10847 20148.1        0     0.0      46.25

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;jstat命令使用
&lt;a href=&quot;https://www.cnblogs.com/lizhonghua34/p/7307139.html&quot;&gt;https://www.cnblogs.com/lizhonghua34/p/7307139.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JVM运行时内存使用情况监控
&lt;a href=&quot;https://blog.csdn.net/zmx729618/article/details/78392715&quot;&gt;https://blog.csdn.net/zmx729618/article/details/78392715&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/JVM-Util.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/27/JVM-Util.html</guid>
        
        <category>JVM</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Docker</title>
        <description>&lt;h4 id=&quot;docker原理-&quot;&gt;Docker原理 ☆☆☆&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;cgroups (2006年 linux推出)&lt;/li&gt;
  &lt;li&gt;namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-hello-world&quot;&gt;Docker Hello World!&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
docker run ubuntu:15.10 /bin/echo &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;docker-pull-image&quot;&gt;Docker pull Image&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull library/hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;docker-run-nginx&quot;&gt;docker run nginx&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; my_nginx_v1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx:v1
&lt;span class=&quot;c&quot;&gt;## --name nginx-test：容器名称。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## -p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## -d nginx： 设置容器在在后台一直运行。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/docker/docker-install-nginx.html&quot;&gt;https://www.runoob.com/docker/docker-install-nginx.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;docker-run-springboot&quot;&gt;docker run springboot&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; springboot/spring-boot-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html&quot;&gt;http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;查看运行的容器&quot;&gt;查看运行的容器&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输出详情介绍：&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## CONTAINER ID: 容器 ID。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## IMAGE: 使用的镜像。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## COMMAND: 启动容器时运行的命令。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## CREATED: 容器的创建时间。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## STATUS: 容器状态。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 状态有7种：&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### created（已创建）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### restarting（重启中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### running（运行中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### removing（迁移中）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### paused（暂停）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### exited（停止）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### dead（死亡）&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## NAMES: 自动分配的容器名称。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;查看容器内的标准输出日志&quot;&gt;查看容器内的标准输出日志&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs 2b1b7a428627
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;启动重启停止容器&quot;&gt;启动/重启/停止容器&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start/restart amazing_cori
docker stop 2b1b7a428627
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;删除容器镜像&quot;&gt;删除容器/镜像&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;20ca2a70ee13
docker rmi ec49dbd13cf5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;compose-machine-swarm&quot;&gt;Compose Machine Swarm&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker/2018/03/22/docker-compose.html&quot;&gt;http://www.ityouknow.com/docker/2018/03/22/docker-compose.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;docker中run和start的区别&quot;&gt;docker中run和start的区别&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;docker run 后面指定的是一个镜像&lt;/li&gt;
  &lt;li&gt;而docker start指定的是一个容器&lt;/li&gt;
  &lt;li&gt;docker run是利用镜像生成容器，并启动容器，而docker start是启动一个之前生成过的容器&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dockerfile-命令详解&quot;&gt;Dockerfile 命令详解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html&quot;&gt;http://www.ityouknow.com/docker/2018/03/15/docker-dockerfile-command-introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ityouknow.com/docker.html&quot;&gt;http://www.ityouknow.com/docker.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cloud-foundry和-kubernetes-的区别&quot;&gt;Cloud Foundry和 Kubernetes 的区别&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_30154571/article/details/84955097&quot;&gt;https://blog.csdn.net/qq_30154571/article/details/84955097&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cloud-foundry-与kubernetes-cfk8s结合简史&quot;&gt;Cloud Foundry 与Kubernetes: CF/K8s结合简史&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhanggongsw/article/details/79948420&quot;&gt;https://blog.csdn.net/zhanggongsw/article/details/79948420&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;阿里飞天云apsara-stack和openstack&quot;&gt;阿里飞天云Apsara Stack和OpenStack&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/liuxiao723846/article/details/82630926&quot;&gt;https://blog.csdn.net/liuxiao723846/article/details/82630926&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.csdn.net/gather_21/MtTaYg1sNTY5Mi1ibG9n.html&quot;&gt;https://www.csdn.net/gather_21/MtTaYg1sNTY5Mi1ibG9n.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kubernetes-vs-openstack&quot;&gt;Kubernetes vs OpenStack&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/luanpeng825485697/article/details/86706131&quot;&gt;https://blog.csdn.net/luanpeng825485697/article/details/86706131&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/dualvencsdn/article/details/79207281&quot;&gt;https://blog.csdn.net/dualvencsdn/article/details/79207281&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubernetes.org.cn/2121.html&quot;&gt;https://www.kubernetes.org.cn/2121.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/goldsunshine/p/9872142.html&quot;&gt;https://www.cnblogs.com/goldsunshine/p/9872142.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;google-kubernetes--docker-swarm--mesos-marathon&quot;&gt;Google Kubernetes &amp;amp; Docker Swarm &amp;amp; Mesos Marathon&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kubernetes.org.cn/757.html&quot;&gt;https://www.kubernetes.org.cn/757.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/55391506&quot;&gt;https://www.zhihu.com/question/55391506&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wzj4858/p/7910883.html&quot;&gt;https://www.cnblogs.com/wzj4858/p/7910883.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dockone.io/article/823&quot;&gt;http://dockone.io/article/823&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28301108&quot;&gt;https://zhuanlan.zhihu.com/p/28301108&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;国内外paas服务一览&quot;&gt;国内外PaaS服务一览&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/a4b9be650fa4&quot;&gt;https://www.jianshu.com/p/a4b9be650fa4&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Mar 2020 22:25:00 +0800</pubDate>
        <link>http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/12/Docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E6%8A%80%E6%9C%AF/2020/03/12/Docker.html</guid>
        
        <category>Docker</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
